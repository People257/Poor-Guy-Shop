// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/people257/poor-guy-shop/payment-service/gen/gen/model"
)

func newPaymentLog(db *gorm.DB, opts ...gen.DOOption) paymentLog {
	_paymentLog := paymentLog{}

	_paymentLog.paymentLogDo.UseDB(db, opts...)
	_paymentLog.paymentLogDo.UseModel(&model.PaymentLog{})

	tableName := _paymentLog.paymentLogDo.TableName()
	_paymentLog.ALL = field.NewAsterisk(tableName)
	_paymentLog.ID = field.NewString(tableName, "id")
	_paymentLog.PaymentOrderID = field.NewString(tableName, "payment_order_id")
	_paymentLog.Action = field.NewString(tableName, "action")
	_paymentLog.RequestData = field.NewString(tableName, "request_data")
	_paymentLog.ResponseData = field.NewString(tableName, "response_data")
	_paymentLog.ErrorMessage = field.NewString(tableName, "error_message")
	_paymentLog.OperatorID = field.NewString(tableName, "operator_id")
	_paymentLog.OperatorType = field.NewString(tableName, "operator_type")
	_paymentLog.CreatedAt = field.NewTime(tableName, "created_at")

	_paymentLog.fillFieldMap()

	return _paymentLog
}

type paymentLog struct {
	paymentLogDo paymentLogDo

	ALL            field.Asterisk
	ID             field.String // 日志ID
	PaymentOrderID field.String // 关联的支付订单ID
	Action         field.String // 操作类型：create创建/callback_success回调成功/callback_failed回调失败/cancel取消/query查询
	RequestData    field.String // 请求数据JSON
	ResponseData   field.String // 响应数据JSON
	ErrorMessage   field.String // 错误信息
	OperatorID     field.String // 操作人ID
	OperatorType   field.String // 操作人类型：user用户/admin管理员/system系统
	CreatedAt      field.Time

	fieldMap map[string]field.Expr
}

func (p paymentLog) Table(newTableName string) *paymentLog {
	p.paymentLogDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p paymentLog) As(alias string) *paymentLog {
	p.paymentLogDo.DO = *(p.paymentLogDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *paymentLog) updateTableName(table string) *paymentLog {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.PaymentOrderID = field.NewString(table, "payment_order_id")
	p.Action = field.NewString(table, "action")
	p.RequestData = field.NewString(table, "request_data")
	p.ResponseData = field.NewString(table, "response_data")
	p.ErrorMessage = field.NewString(table, "error_message")
	p.OperatorID = field.NewString(table, "operator_id")
	p.OperatorType = field.NewString(table, "operator_type")
	p.CreatedAt = field.NewTime(table, "created_at")

	p.fillFieldMap()

	return p
}

func (p *paymentLog) WithContext(ctx context.Context) IPaymentLogDo {
	return p.paymentLogDo.WithContext(ctx)
}

func (p paymentLog) TableName() string { return p.paymentLogDo.TableName() }

func (p paymentLog) Alias() string { return p.paymentLogDo.Alias() }

func (p paymentLog) Columns(cols ...field.Expr) gen.Columns { return p.paymentLogDo.Columns(cols...) }

func (p *paymentLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *paymentLog) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["payment_order_id"] = p.PaymentOrderID
	p.fieldMap["action"] = p.Action
	p.fieldMap["request_data"] = p.RequestData
	p.fieldMap["response_data"] = p.ResponseData
	p.fieldMap["error_message"] = p.ErrorMessage
	p.fieldMap["operator_id"] = p.OperatorID
	p.fieldMap["operator_type"] = p.OperatorType
	p.fieldMap["created_at"] = p.CreatedAt
}

func (p paymentLog) clone(db *gorm.DB) paymentLog {
	p.paymentLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p paymentLog) replaceDB(db *gorm.DB) paymentLog {
	p.paymentLogDo.ReplaceDB(db)
	return p
}

type paymentLogDo struct{ gen.DO }

type IPaymentLogDo interface {
	gen.SubQuery
	Debug() IPaymentLogDo
	WithContext(ctx context.Context) IPaymentLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPaymentLogDo
	WriteDB() IPaymentLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPaymentLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPaymentLogDo
	Not(conds ...gen.Condition) IPaymentLogDo
	Or(conds ...gen.Condition) IPaymentLogDo
	Select(conds ...field.Expr) IPaymentLogDo
	Where(conds ...gen.Condition) IPaymentLogDo
	Order(conds ...field.Expr) IPaymentLogDo
	Distinct(cols ...field.Expr) IPaymentLogDo
	Omit(cols ...field.Expr) IPaymentLogDo
	Join(table schema.Tabler, on ...field.Expr) IPaymentLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPaymentLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPaymentLogDo
	Group(cols ...field.Expr) IPaymentLogDo
	Having(conds ...gen.Condition) IPaymentLogDo
	Limit(limit int) IPaymentLogDo
	Offset(offset int) IPaymentLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPaymentLogDo
	Unscoped() IPaymentLogDo
	Create(values ...*model.PaymentLog) error
	CreateInBatches(values []*model.PaymentLog, batchSize int) error
	Save(values ...*model.PaymentLog) error
	First() (*model.PaymentLog, error)
	Take() (*model.PaymentLog, error)
	Last() (*model.PaymentLog, error)
	Find() ([]*model.PaymentLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PaymentLog, err error)
	FindInBatches(result *[]*model.PaymentLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PaymentLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPaymentLogDo
	Assign(attrs ...field.AssignExpr) IPaymentLogDo
	Joins(fields ...field.RelationField) IPaymentLogDo
	Preload(fields ...field.RelationField) IPaymentLogDo
	FirstOrInit() (*model.PaymentLog, error)
	FirstOrCreate() (*model.PaymentLog, error)
	FindByPage(offset int, limit int) (result []*model.PaymentLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPaymentLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p paymentLogDo) Debug() IPaymentLogDo {
	return p.withDO(p.DO.Debug())
}

func (p paymentLogDo) WithContext(ctx context.Context) IPaymentLogDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paymentLogDo) ReadDB() IPaymentLogDo {
	return p.Clauses(dbresolver.Read)
}

func (p paymentLogDo) WriteDB() IPaymentLogDo {
	return p.Clauses(dbresolver.Write)
}

func (p paymentLogDo) Session(config *gorm.Session) IPaymentLogDo {
	return p.withDO(p.DO.Session(config))
}

func (p paymentLogDo) Clauses(conds ...clause.Expression) IPaymentLogDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paymentLogDo) Returning(value interface{}, columns ...string) IPaymentLogDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paymentLogDo) Not(conds ...gen.Condition) IPaymentLogDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paymentLogDo) Or(conds ...gen.Condition) IPaymentLogDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paymentLogDo) Select(conds ...field.Expr) IPaymentLogDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paymentLogDo) Where(conds ...gen.Condition) IPaymentLogDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paymentLogDo) Order(conds ...field.Expr) IPaymentLogDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paymentLogDo) Distinct(cols ...field.Expr) IPaymentLogDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paymentLogDo) Omit(cols ...field.Expr) IPaymentLogDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paymentLogDo) Join(table schema.Tabler, on ...field.Expr) IPaymentLogDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paymentLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPaymentLogDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paymentLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IPaymentLogDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paymentLogDo) Group(cols ...field.Expr) IPaymentLogDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paymentLogDo) Having(conds ...gen.Condition) IPaymentLogDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paymentLogDo) Limit(limit int) IPaymentLogDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paymentLogDo) Offset(offset int) IPaymentLogDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paymentLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPaymentLogDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paymentLogDo) Unscoped() IPaymentLogDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paymentLogDo) Create(values ...*model.PaymentLog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paymentLogDo) CreateInBatches(values []*model.PaymentLog, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paymentLogDo) Save(values ...*model.PaymentLog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paymentLogDo) First() (*model.PaymentLog, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentLog), nil
	}
}

func (p paymentLogDo) Take() (*model.PaymentLog, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentLog), nil
	}
}

func (p paymentLogDo) Last() (*model.PaymentLog, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentLog), nil
	}
}

func (p paymentLogDo) Find() ([]*model.PaymentLog, error) {
	result, err := p.DO.Find()
	return result.([]*model.PaymentLog), err
}

func (p paymentLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PaymentLog, err error) {
	buf := make([]*model.PaymentLog, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paymentLogDo) FindInBatches(result *[]*model.PaymentLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paymentLogDo) Attrs(attrs ...field.AssignExpr) IPaymentLogDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paymentLogDo) Assign(attrs ...field.AssignExpr) IPaymentLogDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paymentLogDo) Joins(fields ...field.RelationField) IPaymentLogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paymentLogDo) Preload(fields ...field.RelationField) IPaymentLogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paymentLogDo) FirstOrInit() (*model.PaymentLog, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentLog), nil
	}
}

func (p paymentLogDo) FirstOrCreate() (*model.PaymentLog, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentLog), nil
	}
}

func (p paymentLogDo) FindByPage(offset int, limit int) (result []*model.PaymentLog, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paymentLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paymentLogDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paymentLogDo) Delete(models ...*model.PaymentLog) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paymentLogDo) withDO(do gen.Dao) *paymentLogDo {
	p.DO = *do.(*gen.DO)
	return p
}
