// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/people257/poor-guy-shop/payment-service/gen/gen/model"
)

func newPaymentOrder(db *gorm.DB, opts ...gen.DOOption) paymentOrder {
	_paymentOrder := paymentOrder{}

	_paymentOrder.paymentOrderDo.UseDB(db, opts...)
	_paymentOrder.paymentOrderDo.UseModel(&model.PaymentOrder{})

	tableName := _paymentOrder.paymentOrderDo.TableName()
	_paymentOrder.ALL = field.NewAsterisk(tableName)
	_paymentOrder.ID = field.NewString(tableName, "id")
	_paymentOrder.OrderID = field.NewString(tableName, "order_id")
	_paymentOrder.UserID = field.NewString(tableName, "user_id")
	_paymentOrder.Amount = field.NewField(tableName, "amount")
	_paymentOrder.PaymentMethod = field.NewString(tableName, "payment_method")
	_paymentOrder.Status = field.NewString(tableName, "status")
	_paymentOrder.ThirdPartyOrderID = field.NewString(tableName, "third_party_order_id")
	_paymentOrder.ThirdPartyResponse = field.NewString(tableName, "third_party_response")
	_paymentOrder.Subject = field.NewString(tableName, "subject")
	_paymentOrder.Description = field.NewString(tableName, "description")
	_paymentOrder.NotifyURL = field.NewString(tableName, "notify_url")
	_paymentOrder.ReturnURL = field.NewString(tableName, "return_url")
	_paymentOrder.CreatedAt = field.NewTime(tableName, "created_at")
	_paymentOrder.UpdatedAt = field.NewTime(tableName, "updated_at")
	_paymentOrder.PaidAt = field.NewTime(tableName, "paid_at")
	_paymentOrder.ExpiredAt = field.NewTime(tableName, "expired_at")
	_paymentOrder.DeletedAt = field.NewField(tableName, "deleted_at")
	_paymentOrder.Version = field.NewInt32(tableName, "version")

	_paymentOrder.fillFieldMap()

	return _paymentOrder
}

type paymentOrder struct {
	paymentOrderDo paymentOrderDo

	ALL                field.Asterisk
	ID                 field.String // 支付订单ID
	OrderID            field.String // 业务订单ID
	UserID             field.String // 用户ID
	Amount             field.Field  // 支付金额
	PaymentMethod      field.String // 支付方式：alipay支付宝/wechat微信/bank_card银行卡/balance余额
	Status             field.String // 支付状态：pending待支付/success成功/failed失败/cancelled取消/refunded已退款/partial_refunded部分退款
	ThirdPartyOrderID  field.String // 第三方支付订单ID
	ThirdPartyResponse field.String // 第三方支付响应数据
	Subject            field.String // 支付主题
	Description        field.String // 支付描述
	NotifyURL          field.String // 支付回调地址
	ReturnURL          field.String // 支付完成返回地址
	CreatedAt          field.Time
	UpdatedAt          field.Time
	PaidAt             field.Time // 支付完成时间
	ExpiredAt          field.Time // 支付过期时间
	DeletedAt          field.Field
	Version            field.Int32

	fieldMap map[string]field.Expr
}

func (p paymentOrder) Table(newTableName string) *paymentOrder {
	p.paymentOrderDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p paymentOrder) As(alias string) *paymentOrder {
	p.paymentOrderDo.DO = *(p.paymentOrderDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *paymentOrder) updateTableName(table string) *paymentOrder {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.OrderID = field.NewString(table, "order_id")
	p.UserID = field.NewString(table, "user_id")
	p.Amount = field.NewField(table, "amount")
	p.PaymentMethod = field.NewString(table, "payment_method")
	p.Status = field.NewString(table, "status")
	p.ThirdPartyOrderID = field.NewString(table, "third_party_order_id")
	p.ThirdPartyResponse = field.NewString(table, "third_party_response")
	p.Subject = field.NewString(table, "subject")
	p.Description = field.NewString(table, "description")
	p.NotifyURL = field.NewString(table, "notify_url")
	p.ReturnURL = field.NewString(table, "return_url")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.PaidAt = field.NewTime(table, "paid_at")
	p.ExpiredAt = field.NewTime(table, "expired_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Version = field.NewInt32(table, "version")

	p.fillFieldMap()

	return p
}

func (p *paymentOrder) WithContext(ctx context.Context) IPaymentOrderDo {
	return p.paymentOrderDo.WithContext(ctx)
}

func (p paymentOrder) TableName() string { return p.paymentOrderDo.TableName() }

func (p paymentOrder) Alias() string { return p.paymentOrderDo.Alias() }

func (p paymentOrder) Columns(cols ...field.Expr) gen.Columns {
	return p.paymentOrderDo.Columns(cols...)
}

func (p *paymentOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *paymentOrder) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 18)
	p.fieldMap["id"] = p.ID
	p.fieldMap["order_id"] = p.OrderID
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["amount"] = p.Amount
	p.fieldMap["payment_method"] = p.PaymentMethod
	p.fieldMap["status"] = p.Status
	p.fieldMap["third_party_order_id"] = p.ThirdPartyOrderID
	p.fieldMap["third_party_response"] = p.ThirdPartyResponse
	p.fieldMap["subject"] = p.Subject
	p.fieldMap["description"] = p.Description
	p.fieldMap["notify_url"] = p.NotifyURL
	p.fieldMap["return_url"] = p.ReturnURL
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["paid_at"] = p.PaidAt
	p.fieldMap["expired_at"] = p.ExpiredAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["version"] = p.Version
}

func (p paymentOrder) clone(db *gorm.DB) paymentOrder {
	p.paymentOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p paymentOrder) replaceDB(db *gorm.DB) paymentOrder {
	p.paymentOrderDo.ReplaceDB(db)
	return p
}

type paymentOrderDo struct{ gen.DO }

type IPaymentOrderDo interface {
	gen.SubQuery
	Debug() IPaymentOrderDo
	WithContext(ctx context.Context) IPaymentOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPaymentOrderDo
	WriteDB() IPaymentOrderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPaymentOrderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPaymentOrderDo
	Not(conds ...gen.Condition) IPaymentOrderDo
	Or(conds ...gen.Condition) IPaymentOrderDo
	Select(conds ...field.Expr) IPaymentOrderDo
	Where(conds ...gen.Condition) IPaymentOrderDo
	Order(conds ...field.Expr) IPaymentOrderDo
	Distinct(cols ...field.Expr) IPaymentOrderDo
	Omit(cols ...field.Expr) IPaymentOrderDo
	Join(table schema.Tabler, on ...field.Expr) IPaymentOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPaymentOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPaymentOrderDo
	Group(cols ...field.Expr) IPaymentOrderDo
	Having(conds ...gen.Condition) IPaymentOrderDo
	Limit(limit int) IPaymentOrderDo
	Offset(offset int) IPaymentOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPaymentOrderDo
	Unscoped() IPaymentOrderDo
	Create(values ...*model.PaymentOrder) error
	CreateInBatches(values []*model.PaymentOrder, batchSize int) error
	Save(values ...*model.PaymentOrder) error
	First() (*model.PaymentOrder, error)
	Take() (*model.PaymentOrder, error)
	Last() (*model.PaymentOrder, error)
	Find() ([]*model.PaymentOrder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PaymentOrder, err error)
	FindInBatches(result *[]*model.PaymentOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PaymentOrder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPaymentOrderDo
	Assign(attrs ...field.AssignExpr) IPaymentOrderDo
	Joins(fields ...field.RelationField) IPaymentOrderDo
	Preload(fields ...field.RelationField) IPaymentOrderDo
	FirstOrInit() (*model.PaymentOrder, error)
	FirstOrCreate() (*model.PaymentOrder, error)
	FindByPage(offset int, limit int) (result []*model.PaymentOrder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPaymentOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p paymentOrderDo) Debug() IPaymentOrderDo {
	return p.withDO(p.DO.Debug())
}

func (p paymentOrderDo) WithContext(ctx context.Context) IPaymentOrderDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paymentOrderDo) ReadDB() IPaymentOrderDo {
	return p.Clauses(dbresolver.Read)
}

func (p paymentOrderDo) WriteDB() IPaymentOrderDo {
	return p.Clauses(dbresolver.Write)
}

func (p paymentOrderDo) Session(config *gorm.Session) IPaymentOrderDo {
	return p.withDO(p.DO.Session(config))
}

func (p paymentOrderDo) Clauses(conds ...clause.Expression) IPaymentOrderDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paymentOrderDo) Returning(value interface{}, columns ...string) IPaymentOrderDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paymentOrderDo) Not(conds ...gen.Condition) IPaymentOrderDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paymentOrderDo) Or(conds ...gen.Condition) IPaymentOrderDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paymentOrderDo) Select(conds ...field.Expr) IPaymentOrderDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paymentOrderDo) Where(conds ...gen.Condition) IPaymentOrderDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paymentOrderDo) Order(conds ...field.Expr) IPaymentOrderDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paymentOrderDo) Distinct(cols ...field.Expr) IPaymentOrderDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paymentOrderDo) Omit(cols ...field.Expr) IPaymentOrderDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paymentOrderDo) Join(table schema.Tabler, on ...field.Expr) IPaymentOrderDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paymentOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPaymentOrderDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paymentOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) IPaymentOrderDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paymentOrderDo) Group(cols ...field.Expr) IPaymentOrderDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paymentOrderDo) Having(conds ...gen.Condition) IPaymentOrderDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paymentOrderDo) Limit(limit int) IPaymentOrderDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paymentOrderDo) Offset(offset int) IPaymentOrderDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paymentOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPaymentOrderDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paymentOrderDo) Unscoped() IPaymentOrderDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paymentOrderDo) Create(values ...*model.PaymentOrder) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paymentOrderDo) CreateInBatches(values []*model.PaymentOrder, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paymentOrderDo) Save(values ...*model.PaymentOrder) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paymentOrderDo) First() (*model.PaymentOrder, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentOrder), nil
	}
}

func (p paymentOrderDo) Take() (*model.PaymentOrder, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentOrder), nil
	}
}

func (p paymentOrderDo) Last() (*model.PaymentOrder, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentOrder), nil
	}
}

func (p paymentOrderDo) Find() ([]*model.PaymentOrder, error) {
	result, err := p.DO.Find()
	return result.([]*model.PaymentOrder), err
}

func (p paymentOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PaymentOrder, err error) {
	buf := make([]*model.PaymentOrder, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paymentOrderDo) FindInBatches(result *[]*model.PaymentOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paymentOrderDo) Attrs(attrs ...field.AssignExpr) IPaymentOrderDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paymentOrderDo) Assign(attrs ...field.AssignExpr) IPaymentOrderDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paymentOrderDo) Joins(fields ...field.RelationField) IPaymentOrderDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paymentOrderDo) Preload(fields ...field.RelationField) IPaymentOrderDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paymentOrderDo) FirstOrInit() (*model.PaymentOrder, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentOrder), nil
	}
}

func (p paymentOrderDo) FirstOrCreate() (*model.PaymentOrder, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentOrder), nil
	}
}

func (p paymentOrderDo) FindByPage(offset int, limit int) (result []*model.PaymentOrder, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paymentOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paymentOrderDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paymentOrderDo) Delete(models ...*model.PaymentOrder) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paymentOrderDo) withDO(do gen.Dao) *paymentOrderDo {
	p.DO = *do.(*gen.DO)
	return p
}
