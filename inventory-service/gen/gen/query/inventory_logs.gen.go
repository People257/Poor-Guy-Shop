// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/people257/poor-guy-shop/inventory-service/gen/gen/model"
)

func newInventoryLog(db *gorm.DB, opts ...gen.DOOption) inventoryLog {
	_inventoryLog := inventoryLog{}

	_inventoryLog.inventoryLogDo.UseDB(db, opts...)
	_inventoryLog.inventoryLogDo.UseModel(&model.InventoryLog{})

	tableName := _inventoryLog.inventoryLogDo.TableName()
	_inventoryLog.ALL = field.NewAsterisk(tableName)
	_inventoryLog.ID = field.NewString(tableName, "id")
	_inventoryLog.SkuID = field.NewString(tableName, "sku_id")
	_inventoryLog.Type = field.NewString(tableName, "type")
	_inventoryLog.Quantity = field.NewInt32(tableName, "quantity")
	_inventoryLog.BeforeQuantity = field.NewInt32(tableName, "before_quantity")
	_inventoryLog.AfterQuantity = field.NewInt32(tableName, "after_quantity")
	_inventoryLog.Reason = field.NewString(tableName, "reason")
	_inventoryLog.OrderID = field.NewString(tableName, "order_id")
	_inventoryLog.OperatorID = field.NewString(tableName, "operator_id")
	_inventoryLog.CreatedAt = field.NewTime(tableName, "created_at")

	_inventoryLog.fillFieldMap()

	return _inventoryLog
}

type inventoryLog struct {
	inventoryLogDo inventoryLogDo

	ALL            field.Asterisk
	ID             field.String // 主键ID
	SkuID          field.String // SKU ID（UUID类型）
	Type           field.String // 变动类型：in(入库)/out(出库)/reserve(预占)/release(释放)/adjust(调整)
	Quantity       field.Int32  // 变动数量（正数为增加，负数为减少）
	BeforeQuantity field.Int32  // 变动前数量
	AfterQuantity  field.Int32  // 变动后数量
	Reason         field.String // 变动原因说明
	OrderID        field.String // 关联订单ID（UUID类型，可为空）
	OperatorID     field.String // 操作人ID（UUID类型，可为空）
	CreatedAt      field.Time

	fieldMap map[string]field.Expr
}

func (i inventoryLog) Table(newTableName string) *inventoryLog {
	i.inventoryLogDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i inventoryLog) As(alias string) *inventoryLog {
	i.inventoryLogDo.DO = *(i.inventoryLogDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *inventoryLog) updateTableName(table string) *inventoryLog {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewString(table, "id")
	i.SkuID = field.NewString(table, "sku_id")
	i.Type = field.NewString(table, "type")
	i.Quantity = field.NewInt32(table, "quantity")
	i.BeforeQuantity = field.NewInt32(table, "before_quantity")
	i.AfterQuantity = field.NewInt32(table, "after_quantity")
	i.Reason = field.NewString(table, "reason")
	i.OrderID = field.NewString(table, "order_id")
	i.OperatorID = field.NewString(table, "operator_id")
	i.CreatedAt = field.NewTime(table, "created_at")

	i.fillFieldMap()

	return i
}

func (i *inventoryLog) WithContext(ctx context.Context) IInventoryLogDo {
	return i.inventoryLogDo.WithContext(ctx)
}

func (i inventoryLog) TableName() string { return i.inventoryLogDo.TableName() }

func (i inventoryLog) Alias() string { return i.inventoryLogDo.Alias() }

func (i inventoryLog) Columns(cols ...field.Expr) gen.Columns {
	return i.inventoryLogDo.Columns(cols...)
}

func (i *inventoryLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *inventoryLog) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 10)
	i.fieldMap["id"] = i.ID
	i.fieldMap["sku_id"] = i.SkuID
	i.fieldMap["type"] = i.Type
	i.fieldMap["quantity"] = i.Quantity
	i.fieldMap["before_quantity"] = i.BeforeQuantity
	i.fieldMap["after_quantity"] = i.AfterQuantity
	i.fieldMap["reason"] = i.Reason
	i.fieldMap["order_id"] = i.OrderID
	i.fieldMap["operator_id"] = i.OperatorID
	i.fieldMap["created_at"] = i.CreatedAt
}

func (i inventoryLog) clone(db *gorm.DB) inventoryLog {
	i.inventoryLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i inventoryLog) replaceDB(db *gorm.DB) inventoryLog {
	i.inventoryLogDo.ReplaceDB(db)
	return i
}

type inventoryLogDo struct{ gen.DO }

type IInventoryLogDo interface {
	gen.SubQuery
	Debug() IInventoryLogDo
	WithContext(ctx context.Context) IInventoryLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInventoryLogDo
	WriteDB() IInventoryLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInventoryLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInventoryLogDo
	Not(conds ...gen.Condition) IInventoryLogDo
	Or(conds ...gen.Condition) IInventoryLogDo
	Select(conds ...field.Expr) IInventoryLogDo
	Where(conds ...gen.Condition) IInventoryLogDo
	Order(conds ...field.Expr) IInventoryLogDo
	Distinct(cols ...field.Expr) IInventoryLogDo
	Omit(cols ...field.Expr) IInventoryLogDo
	Join(table schema.Tabler, on ...field.Expr) IInventoryLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInventoryLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInventoryLogDo
	Group(cols ...field.Expr) IInventoryLogDo
	Having(conds ...gen.Condition) IInventoryLogDo
	Limit(limit int) IInventoryLogDo
	Offset(offset int) IInventoryLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInventoryLogDo
	Unscoped() IInventoryLogDo
	Create(values ...*model.InventoryLog) error
	CreateInBatches(values []*model.InventoryLog, batchSize int) error
	Save(values ...*model.InventoryLog) error
	First() (*model.InventoryLog, error)
	Take() (*model.InventoryLog, error)
	Last() (*model.InventoryLog, error)
	Find() ([]*model.InventoryLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InventoryLog, err error)
	FindInBatches(result *[]*model.InventoryLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.InventoryLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInventoryLogDo
	Assign(attrs ...field.AssignExpr) IInventoryLogDo
	Joins(fields ...field.RelationField) IInventoryLogDo
	Preload(fields ...field.RelationField) IInventoryLogDo
	FirstOrInit() (*model.InventoryLog, error)
	FirstOrCreate() (*model.InventoryLog, error)
	FindByPage(offset int, limit int) (result []*model.InventoryLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInventoryLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i inventoryLogDo) Debug() IInventoryLogDo {
	return i.withDO(i.DO.Debug())
}

func (i inventoryLogDo) WithContext(ctx context.Context) IInventoryLogDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i inventoryLogDo) ReadDB() IInventoryLogDo {
	return i.Clauses(dbresolver.Read)
}

func (i inventoryLogDo) WriteDB() IInventoryLogDo {
	return i.Clauses(dbresolver.Write)
}

func (i inventoryLogDo) Session(config *gorm.Session) IInventoryLogDo {
	return i.withDO(i.DO.Session(config))
}

func (i inventoryLogDo) Clauses(conds ...clause.Expression) IInventoryLogDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i inventoryLogDo) Returning(value interface{}, columns ...string) IInventoryLogDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i inventoryLogDo) Not(conds ...gen.Condition) IInventoryLogDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i inventoryLogDo) Or(conds ...gen.Condition) IInventoryLogDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i inventoryLogDo) Select(conds ...field.Expr) IInventoryLogDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i inventoryLogDo) Where(conds ...gen.Condition) IInventoryLogDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i inventoryLogDo) Order(conds ...field.Expr) IInventoryLogDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i inventoryLogDo) Distinct(cols ...field.Expr) IInventoryLogDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i inventoryLogDo) Omit(cols ...field.Expr) IInventoryLogDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i inventoryLogDo) Join(table schema.Tabler, on ...field.Expr) IInventoryLogDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i inventoryLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInventoryLogDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i inventoryLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IInventoryLogDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i inventoryLogDo) Group(cols ...field.Expr) IInventoryLogDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i inventoryLogDo) Having(conds ...gen.Condition) IInventoryLogDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i inventoryLogDo) Limit(limit int) IInventoryLogDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i inventoryLogDo) Offset(offset int) IInventoryLogDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i inventoryLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInventoryLogDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i inventoryLogDo) Unscoped() IInventoryLogDo {
	return i.withDO(i.DO.Unscoped())
}

func (i inventoryLogDo) Create(values ...*model.InventoryLog) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i inventoryLogDo) CreateInBatches(values []*model.InventoryLog, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i inventoryLogDo) Save(values ...*model.InventoryLog) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i inventoryLogDo) First() (*model.InventoryLog, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InventoryLog), nil
	}
}

func (i inventoryLogDo) Take() (*model.InventoryLog, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InventoryLog), nil
	}
}

func (i inventoryLogDo) Last() (*model.InventoryLog, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InventoryLog), nil
	}
}

func (i inventoryLogDo) Find() ([]*model.InventoryLog, error) {
	result, err := i.DO.Find()
	return result.([]*model.InventoryLog), err
}

func (i inventoryLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InventoryLog, err error) {
	buf := make([]*model.InventoryLog, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i inventoryLogDo) FindInBatches(result *[]*model.InventoryLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i inventoryLogDo) Attrs(attrs ...field.AssignExpr) IInventoryLogDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i inventoryLogDo) Assign(attrs ...field.AssignExpr) IInventoryLogDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i inventoryLogDo) Joins(fields ...field.RelationField) IInventoryLogDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i inventoryLogDo) Preload(fields ...field.RelationField) IInventoryLogDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i inventoryLogDo) FirstOrInit() (*model.InventoryLog, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InventoryLog), nil
	}
}

func (i inventoryLogDo) FirstOrCreate() (*model.InventoryLog, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InventoryLog), nil
	}
}

func (i inventoryLogDo) FindByPage(offset int, limit int) (result []*model.InventoryLog, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i inventoryLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i inventoryLogDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i inventoryLogDo) Delete(models ...*model.InventoryLog) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *inventoryLogDo) withDO(do gen.Dao) *inventoryLogDo {
	i.DO = *do.(*gen.DO)
	return i
}
