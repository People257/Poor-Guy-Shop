// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/people257/poor-guy-shop/inventory-service/gen/gen/model"
)

func newInventoryReservation(db *gorm.DB, opts ...gen.DOOption) inventoryReservation {
	_inventoryReservation := inventoryReservation{}

	_inventoryReservation.inventoryReservationDo.UseDB(db, opts...)
	_inventoryReservation.inventoryReservationDo.UseModel(&model.InventoryReservation{})

	tableName := _inventoryReservation.inventoryReservationDo.TableName()
	_inventoryReservation.ALL = field.NewAsterisk(tableName)
	_inventoryReservation.ID = field.NewString(tableName, "id")
	_inventoryReservation.SkuID = field.NewString(tableName, "sku_id")
	_inventoryReservation.OrderID = field.NewString(tableName, "order_id")
	_inventoryReservation.Quantity = field.NewInt32(tableName, "quantity")
	_inventoryReservation.Status = field.NewString(tableName, "status")
	_inventoryReservation.CreatedAt = field.NewTime(tableName, "created_at")
	_inventoryReservation.UpdatedAt = field.NewTime(tableName, "updated_at")
	_inventoryReservation.ExpiresAt = field.NewTime(tableName, "expires_at")
	_inventoryReservation.ConfirmedAt = field.NewTime(tableName, "confirmed_at")
	_inventoryReservation.ReleasedAt = field.NewTime(tableName, "released_at")
	_inventoryReservation.Version = field.NewInt32(tableName, "version")

	_inventoryReservation.fillFieldMap()

	return _inventoryReservation
}

type inventoryReservation struct {
	inventoryReservationDo inventoryReservationDo

	ALL         field.Asterisk
	ID          field.String // 主键ID
	SkuID       field.String // SKU ID（UUID类型）
	OrderID     field.String // 订单ID（UUID类型）
	Quantity    field.Int32  // 预占数量
	Status      field.String // 状态：reserved(预占中)/confirmed(已确认)/released(已释放)/expired(已过期)
	CreatedAt   field.Time
	UpdatedAt   field.Time
	ExpiresAt   field.Time  // 预占过期时间
	ConfirmedAt field.Time  // 确认扣减时间
	ReleasedAt  field.Time  // 释放时间
	Version     field.Int32 // 乐观锁版本号

	fieldMap map[string]field.Expr
}

func (i inventoryReservation) Table(newTableName string) *inventoryReservation {
	i.inventoryReservationDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i inventoryReservation) As(alias string) *inventoryReservation {
	i.inventoryReservationDo.DO = *(i.inventoryReservationDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *inventoryReservation) updateTableName(table string) *inventoryReservation {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewString(table, "id")
	i.SkuID = field.NewString(table, "sku_id")
	i.OrderID = field.NewString(table, "order_id")
	i.Quantity = field.NewInt32(table, "quantity")
	i.Status = field.NewString(table, "status")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.ExpiresAt = field.NewTime(table, "expires_at")
	i.ConfirmedAt = field.NewTime(table, "confirmed_at")
	i.ReleasedAt = field.NewTime(table, "released_at")
	i.Version = field.NewInt32(table, "version")

	i.fillFieldMap()

	return i
}

func (i *inventoryReservation) WithContext(ctx context.Context) IInventoryReservationDo {
	return i.inventoryReservationDo.WithContext(ctx)
}

func (i inventoryReservation) TableName() string { return i.inventoryReservationDo.TableName() }

func (i inventoryReservation) Alias() string { return i.inventoryReservationDo.Alias() }

func (i inventoryReservation) Columns(cols ...field.Expr) gen.Columns {
	return i.inventoryReservationDo.Columns(cols...)
}

func (i *inventoryReservation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *inventoryReservation) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 11)
	i.fieldMap["id"] = i.ID
	i.fieldMap["sku_id"] = i.SkuID
	i.fieldMap["order_id"] = i.OrderID
	i.fieldMap["quantity"] = i.Quantity
	i.fieldMap["status"] = i.Status
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["expires_at"] = i.ExpiresAt
	i.fieldMap["confirmed_at"] = i.ConfirmedAt
	i.fieldMap["released_at"] = i.ReleasedAt
	i.fieldMap["version"] = i.Version
}

func (i inventoryReservation) clone(db *gorm.DB) inventoryReservation {
	i.inventoryReservationDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i inventoryReservation) replaceDB(db *gorm.DB) inventoryReservation {
	i.inventoryReservationDo.ReplaceDB(db)
	return i
}

type inventoryReservationDo struct{ gen.DO }

type IInventoryReservationDo interface {
	gen.SubQuery
	Debug() IInventoryReservationDo
	WithContext(ctx context.Context) IInventoryReservationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInventoryReservationDo
	WriteDB() IInventoryReservationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInventoryReservationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInventoryReservationDo
	Not(conds ...gen.Condition) IInventoryReservationDo
	Or(conds ...gen.Condition) IInventoryReservationDo
	Select(conds ...field.Expr) IInventoryReservationDo
	Where(conds ...gen.Condition) IInventoryReservationDo
	Order(conds ...field.Expr) IInventoryReservationDo
	Distinct(cols ...field.Expr) IInventoryReservationDo
	Omit(cols ...field.Expr) IInventoryReservationDo
	Join(table schema.Tabler, on ...field.Expr) IInventoryReservationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInventoryReservationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInventoryReservationDo
	Group(cols ...field.Expr) IInventoryReservationDo
	Having(conds ...gen.Condition) IInventoryReservationDo
	Limit(limit int) IInventoryReservationDo
	Offset(offset int) IInventoryReservationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInventoryReservationDo
	Unscoped() IInventoryReservationDo
	Create(values ...*model.InventoryReservation) error
	CreateInBatches(values []*model.InventoryReservation, batchSize int) error
	Save(values ...*model.InventoryReservation) error
	First() (*model.InventoryReservation, error)
	Take() (*model.InventoryReservation, error)
	Last() (*model.InventoryReservation, error)
	Find() ([]*model.InventoryReservation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InventoryReservation, err error)
	FindInBatches(result *[]*model.InventoryReservation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.InventoryReservation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInventoryReservationDo
	Assign(attrs ...field.AssignExpr) IInventoryReservationDo
	Joins(fields ...field.RelationField) IInventoryReservationDo
	Preload(fields ...field.RelationField) IInventoryReservationDo
	FirstOrInit() (*model.InventoryReservation, error)
	FirstOrCreate() (*model.InventoryReservation, error)
	FindByPage(offset int, limit int) (result []*model.InventoryReservation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInventoryReservationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i inventoryReservationDo) Debug() IInventoryReservationDo {
	return i.withDO(i.DO.Debug())
}

func (i inventoryReservationDo) WithContext(ctx context.Context) IInventoryReservationDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i inventoryReservationDo) ReadDB() IInventoryReservationDo {
	return i.Clauses(dbresolver.Read)
}

func (i inventoryReservationDo) WriteDB() IInventoryReservationDo {
	return i.Clauses(dbresolver.Write)
}

func (i inventoryReservationDo) Session(config *gorm.Session) IInventoryReservationDo {
	return i.withDO(i.DO.Session(config))
}

func (i inventoryReservationDo) Clauses(conds ...clause.Expression) IInventoryReservationDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i inventoryReservationDo) Returning(value interface{}, columns ...string) IInventoryReservationDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i inventoryReservationDo) Not(conds ...gen.Condition) IInventoryReservationDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i inventoryReservationDo) Or(conds ...gen.Condition) IInventoryReservationDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i inventoryReservationDo) Select(conds ...field.Expr) IInventoryReservationDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i inventoryReservationDo) Where(conds ...gen.Condition) IInventoryReservationDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i inventoryReservationDo) Order(conds ...field.Expr) IInventoryReservationDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i inventoryReservationDo) Distinct(cols ...field.Expr) IInventoryReservationDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i inventoryReservationDo) Omit(cols ...field.Expr) IInventoryReservationDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i inventoryReservationDo) Join(table schema.Tabler, on ...field.Expr) IInventoryReservationDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i inventoryReservationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInventoryReservationDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i inventoryReservationDo) RightJoin(table schema.Tabler, on ...field.Expr) IInventoryReservationDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i inventoryReservationDo) Group(cols ...field.Expr) IInventoryReservationDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i inventoryReservationDo) Having(conds ...gen.Condition) IInventoryReservationDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i inventoryReservationDo) Limit(limit int) IInventoryReservationDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i inventoryReservationDo) Offset(offset int) IInventoryReservationDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i inventoryReservationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInventoryReservationDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i inventoryReservationDo) Unscoped() IInventoryReservationDo {
	return i.withDO(i.DO.Unscoped())
}

func (i inventoryReservationDo) Create(values ...*model.InventoryReservation) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i inventoryReservationDo) CreateInBatches(values []*model.InventoryReservation, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i inventoryReservationDo) Save(values ...*model.InventoryReservation) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i inventoryReservationDo) First() (*model.InventoryReservation, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InventoryReservation), nil
	}
}

func (i inventoryReservationDo) Take() (*model.InventoryReservation, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InventoryReservation), nil
	}
}

func (i inventoryReservationDo) Last() (*model.InventoryReservation, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InventoryReservation), nil
	}
}

func (i inventoryReservationDo) Find() ([]*model.InventoryReservation, error) {
	result, err := i.DO.Find()
	return result.([]*model.InventoryReservation), err
}

func (i inventoryReservationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InventoryReservation, err error) {
	buf := make([]*model.InventoryReservation, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i inventoryReservationDo) FindInBatches(result *[]*model.InventoryReservation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i inventoryReservationDo) Attrs(attrs ...field.AssignExpr) IInventoryReservationDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i inventoryReservationDo) Assign(attrs ...field.AssignExpr) IInventoryReservationDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i inventoryReservationDo) Joins(fields ...field.RelationField) IInventoryReservationDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i inventoryReservationDo) Preload(fields ...field.RelationField) IInventoryReservationDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i inventoryReservationDo) FirstOrInit() (*model.InventoryReservation, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InventoryReservation), nil
	}
}

func (i inventoryReservationDo) FirstOrCreate() (*model.InventoryReservation, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InventoryReservation), nil
	}
}

func (i inventoryReservationDo) FindByPage(offset int, limit int) (result []*model.InventoryReservation, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i inventoryReservationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i inventoryReservationDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i inventoryReservationDo) Delete(models ...*model.InventoryReservation) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *inventoryReservationDo) withDO(do gen.Dao) *inventoryReservationDo {
	i.DO = *do.(*gen.DO)
	return i
}
