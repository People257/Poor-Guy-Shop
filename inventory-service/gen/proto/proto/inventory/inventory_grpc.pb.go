// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/inventory/inventory.proto

package inventory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryService_GetInventory_FullMethodName               = "/inventory.inventory.InventoryService/GetInventory"
	InventoryService_BatchGetInventory_FullMethodName          = "/inventory.inventory.InventoryService/BatchGetInventory"
	InventoryService_UpdateInventory_FullMethodName            = "/inventory.inventory.InventoryService/UpdateInventory"
	InventoryService_ReserveInventory_FullMethodName           = "/inventory.inventory.InventoryService/ReserveInventory"
	InventoryService_ReleaseReservedInventory_FullMethodName   = "/inventory.inventory.InventoryService/ReleaseReservedInventory"
	InventoryService_ConfirmInventoryDeduction_FullMethodName  = "/inventory.inventory.InventoryService/ConfirmInventoryDeduction"
	InventoryService_GetInventoryLogs_FullMethodName           = "/inventory.inventory.InventoryService/GetInventoryLogs"
	InventoryService_CheckInventoryAvailability_FullMethodName = "/inventory.inventory.InventoryService/CheckInventoryAvailability"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 库存服务
type InventoryServiceClient interface {
	// 查询库存
	GetInventory(ctx context.Context, in *GetInventoryReq, opts ...grpc.CallOption) (*GetInventoryResp, error)
	// 批量查询库存
	BatchGetInventory(ctx context.Context, in *BatchGetInventoryReq, opts ...grpc.CallOption) (*BatchGetInventoryResp, error)
	// 更新库存
	UpdateInventory(ctx context.Context, in *UpdateInventoryReq, opts ...grpc.CallOption) (*UpdateInventoryResp, error)
	// 预占库存
	ReserveInventory(ctx context.Context, in *ReserveInventoryReq, opts ...grpc.CallOption) (*ReserveInventoryResp, error)
	// 释放预占库存
	ReleaseReservedInventory(ctx context.Context, in *ReleaseReservedInventoryReq, opts ...grpc.CallOption) (*ReleaseReservedInventoryResp, error)
	// 确认扣减库存
	ConfirmInventoryDeduction(ctx context.Context, in *ConfirmInventoryDeductionReq, opts ...grpc.CallOption) (*ConfirmInventoryDeductionResp, error)
	// 库存变动日志
	GetInventoryLogs(ctx context.Context, in *GetInventoryLogsReq, opts ...grpc.CallOption) (*GetInventoryLogsResp, error)
	// 内部RPC - 检查库存充足性
	CheckInventoryAvailability(ctx context.Context, in *CheckInventoryAvailabilityReq, opts ...grpc.CallOption) (*CheckInventoryAvailabilityResp, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) GetInventory(ctx context.Context, in *GetInventoryReq, opts ...grpc.CallOption) (*GetInventoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInventoryResp)
	err := c.cc.Invoke(ctx, InventoryService_GetInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) BatchGetInventory(ctx context.Context, in *BatchGetInventoryReq, opts ...grpc.CallOption) (*BatchGetInventoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetInventoryResp)
	err := c.cc.Invoke(ctx, InventoryService_BatchGetInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateInventory(ctx context.Context, in *UpdateInventoryReq, opts ...grpc.CallOption) (*UpdateInventoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInventoryResp)
	err := c.cc.Invoke(ctx, InventoryService_UpdateInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ReserveInventory(ctx context.Context, in *ReserveInventoryReq, opts ...grpc.CallOption) (*ReserveInventoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveInventoryResp)
	err := c.cc.Invoke(ctx, InventoryService_ReserveInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ReleaseReservedInventory(ctx context.Context, in *ReleaseReservedInventoryReq, opts ...grpc.CallOption) (*ReleaseReservedInventoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseReservedInventoryResp)
	err := c.cc.Invoke(ctx, InventoryService_ReleaseReservedInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ConfirmInventoryDeduction(ctx context.Context, in *ConfirmInventoryDeductionReq, opts ...grpc.CallOption) (*ConfirmInventoryDeductionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmInventoryDeductionResp)
	err := c.cc.Invoke(ctx, InventoryService_ConfirmInventoryDeduction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetInventoryLogs(ctx context.Context, in *GetInventoryLogsReq, opts ...grpc.CallOption) (*GetInventoryLogsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInventoryLogsResp)
	err := c.cc.Invoke(ctx, InventoryService_GetInventoryLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CheckInventoryAvailability(ctx context.Context, in *CheckInventoryAvailabilityReq, opts ...grpc.CallOption) (*CheckInventoryAvailabilityResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckInventoryAvailabilityResp)
	err := c.cc.Invoke(ctx, InventoryService_CheckInventoryAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations should embed UnimplementedInventoryServiceServer
// for forward compatibility.
//
// 库存服务
type InventoryServiceServer interface {
	// 查询库存
	GetInventory(context.Context, *GetInventoryReq) (*GetInventoryResp, error)
	// 批量查询库存
	BatchGetInventory(context.Context, *BatchGetInventoryReq) (*BatchGetInventoryResp, error)
	// 更新库存
	UpdateInventory(context.Context, *UpdateInventoryReq) (*UpdateInventoryResp, error)
	// 预占库存
	ReserveInventory(context.Context, *ReserveInventoryReq) (*ReserveInventoryResp, error)
	// 释放预占库存
	ReleaseReservedInventory(context.Context, *ReleaseReservedInventoryReq) (*ReleaseReservedInventoryResp, error)
	// 确认扣减库存
	ConfirmInventoryDeduction(context.Context, *ConfirmInventoryDeductionReq) (*ConfirmInventoryDeductionResp, error)
	// 库存变动日志
	GetInventoryLogs(context.Context, *GetInventoryLogsReq) (*GetInventoryLogsResp, error)
	// 内部RPC - 检查库存充足性
	CheckInventoryAvailability(context.Context, *CheckInventoryAvailabilityReq) (*CheckInventoryAvailabilityResp, error)
}

// UnimplementedInventoryServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServiceServer struct{}

func (UnimplementedInventoryServiceServer) GetInventory(context.Context, *GetInventoryReq) (*GetInventoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventory not implemented")
}
func (UnimplementedInventoryServiceServer) BatchGetInventory(context.Context, *BatchGetInventoryReq) (*BatchGetInventoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetInventory not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateInventory(context.Context, *UpdateInventoryReq) (*UpdateInventoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInventory not implemented")
}
func (UnimplementedInventoryServiceServer) ReserveInventory(context.Context, *ReserveInventoryReq) (*ReserveInventoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveInventory not implemented")
}
func (UnimplementedInventoryServiceServer) ReleaseReservedInventory(context.Context, *ReleaseReservedInventoryReq) (*ReleaseReservedInventoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseReservedInventory not implemented")
}
func (UnimplementedInventoryServiceServer) ConfirmInventoryDeduction(context.Context, *ConfirmInventoryDeductionReq) (*ConfirmInventoryDeductionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmInventoryDeduction not implemented")
}
func (UnimplementedInventoryServiceServer) GetInventoryLogs(context.Context, *GetInventoryLogsReq) (*GetInventoryLogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryLogs not implemented")
}
func (UnimplementedInventoryServiceServer) CheckInventoryAvailability(context.Context, *CheckInventoryAvailabilityReq) (*CheckInventoryAvailabilityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInventoryAvailability not implemented")
}
func (UnimplementedInventoryServiceServer) testEmbeddedByValue() {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_GetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetInventory(ctx, req.(*GetInventoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_BatchGetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetInventoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).BatchGetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_BatchGetInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).BatchGetInventory(ctx, req.(*BatchGetInventoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInventoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateInventory(ctx, req.(*UpdateInventoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ReserveInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveInventoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ReserveInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ReserveInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ReserveInventory(ctx, req.(*ReserveInventoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ReleaseReservedInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseReservedInventoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ReleaseReservedInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ReleaseReservedInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ReleaseReservedInventory(ctx, req.(*ReleaseReservedInventoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ConfirmInventoryDeduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmInventoryDeductionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ConfirmInventoryDeduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ConfirmInventoryDeduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ConfirmInventoryDeduction(ctx, req.(*ConfirmInventoryDeductionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetInventoryLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetInventoryLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetInventoryLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetInventoryLogs(ctx, req.(*GetInventoryLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CheckInventoryAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInventoryAvailabilityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CheckInventoryAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CheckInventoryAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CheckInventoryAvailability(ctx, req.(*CheckInventoryAvailabilityReq))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.inventory.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInventory",
			Handler:    _InventoryService_GetInventory_Handler,
		},
		{
			MethodName: "BatchGetInventory",
			Handler:    _InventoryService_BatchGetInventory_Handler,
		},
		{
			MethodName: "UpdateInventory",
			Handler:    _InventoryService_UpdateInventory_Handler,
		},
		{
			MethodName: "ReserveInventory",
			Handler:    _InventoryService_ReserveInventory_Handler,
		},
		{
			MethodName: "ReleaseReservedInventory",
			Handler:    _InventoryService_ReleaseReservedInventory_Handler,
		},
		{
			MethodName: "ConfirmInventoryDeduction",
			Handler:    _InventoryService_ConfirmInventoryDeduction_Handler,
		},
		{
			MethodName: "GetInventoryLogs",
			Handler:    _InventoryService_GetInventoryLogs_Handler,
		},
		{
			MethodName: "CheckInventoryAvailability",
			Handler:    _InventoryService_CheckInventoryAvailability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/inventory/inventory.proto",
}
