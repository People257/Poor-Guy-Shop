// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/inventory/payment/payment.proto

package payment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentService_CreatePaymentOrder_FullMethodName    = "/payment.payment.PaymentService/CreatePaymentOrder"
	PaymentService_GetPaymentOrder_FullMethodName       = "/payment.payment.PaymentService/GetPaymentOrder"
	PaymentService_HandlePaymentCallback_FullMethodName = "/payment.payment.PaymentService/HandlePaymentCallback"
	PaymentService_CreateRefund_FullMethodName          = "/payment.payment.PaymentService/CreateRefund"
	PaymentService_GetRefund_FullMethodName             = "/payment.payment.PaymentService/GetRefund"
	PaymentService_VerifyPaymentStatus_FullMethodName   = "/payment.payment.PaymentService/VerifyPaymentStatus"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 支付服务
type PaymentServiceClient interface {
	// 创建支付订单
	CreatePaymentOrder(ctx context.Context, in *CreatePaymentOrderReq, opts ...grpc.CallOption) (*CreatePaymentOrderResp, error)
	// 查询支付订单
	GetPaymentOrder(ctx context.Context, in *GetPaymentOrderReq, opts ...grpc.CallOption) (*GetPaymentOrderResp, error)
	// 支付回调处理
	HandlePaymentCallback(ctx context.Context, in *HandlePaymentCallbackReq, opts ...grpc.CallOption) (*HandlePaymentCallbackResp, error)
	// 申请退款
	CreateRefund(ctx context.Context, in *CreateRefundReq, opts ...grpc.CallOption) (*CreateRefundResp, error)
	// 查询退款状态
	GetRefund(ctx context.Context, in *GetRefundReq, opts ...grpc.CallOption) (*GetRefundResp, error)
	// 内部RPC - 验证支付状态
	VerifyPaymentStatus(ctx context.Context, in *VerifyPaymentStatusReq, opts ...grpc.CallOption) (*VerifyPaymentStatusResp, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) CreatePaymentOrder(ctx context.Context, in *CreatePaymentOrderReq, opts ...grpc.CallOption) (*CreatePaymentOrderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentOrderResp)
	err := c.cc.Invoke(ctx, PaymentService_CreatePaymentOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentOrder(ctx context.Context, in *GetPaymentOrderReq, opts ...grpc.CallOption) (*GetPaymentOrderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentOrderResp)
	err := c.cc.Invoke(ctx, PaymentService_GetPaymentOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) HandlePaymentCallback(ctx context.Context, in *HandlePaymentCallbackReq, opts ...grpc.CallOption) (*HandlePaymentCallbackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandlePaymentCallbackResp)
	err := c.cc.Invoke(ctx, PaymentService_HandlePaymentCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreateRefund(ctx context.Context, in *CreateRefundReq, opts ...grpc.CallOption) (*CreateRefundResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRefundResp)
	err := c.cc.Invoke(ctx, PaymentService_CreateRefund_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetRefund(ctx context.Context, in *GetRefundReq, opts ...grpc.CallOption) (*GetRefundResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRefundResp)
	err := c.cc.Invoke(ctx, PaymentService_GetRefund_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) VerifyPaymentStatus(ctx context.Context, in *VerifyPaymentStatusReq, opts ...grpc.CallOption) (*VerifyPaymentStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyPaymentStatusResp)
	err := c.cc.Invoke(ctx, PaymentService_VerifyPaymentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations should embed UnimplementedPaymentServiceServer
// for forward compatibility.
//
// 支付服务
type PaymentServiceServer interface {
	// 创建支付订单
	CreatePaymentOrder(context.Context, *CreatePaymentOrderReq) (*CreatePaymentOrderResp, error)
	// 查询支付订单
	GetPaymentOrder(context.Context, *GetPaymentOrderReq) (*GetPaymentOrderResp, error)
	// 支付回调处理
	HandlePaymentCallback(context.Context, *HandlePaymentCallbackReq) (*HandlePaymentCallbackResp, error)
	// 申请退款
	CreateRefund(context.Context, *CreateRefundReq) (*CreateRefundResp, error)
	// 查询退款状态
	GetRefund(context.Context, *GetRefundReq) (*GetRefundResp, error)
	// 内部RPC - 验证支付状态
	VerifyPaymentStatus(context.Context, *VerifyPaymentStatusReq) (*VerifyPaymentStatusResp, error)
}

// UnimplementedPaymentServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServiceServer struct{}

func (UnimplementedPaymentServiceServer) CreatePaymentOrder(context.Context, *CreatePaymentOrderReq) (*CreatePaymentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentOrder not implemented")
}
func (UnimplementedPaymentServiceServer) GetPaymentOrder(context.Context, *GetPaymentOrderReq) (*GetPaymentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentOrder not implemented")
}
func (UnimplementedPaymentServiceServer) HandlePaymentCallback(context.Context, *HandlePaymentCallbackReq) (*HandlePaymentCallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlePaymentCallback not implemented")
}
func (UnimplementedPaymentServiceServer) CreateRefund(context.Context, *CreateRefundReq) (*CreateRefundResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRefund not implemented")
}
func (UnimplementedPaymentServiceServer) GetRefund(context.Context, *GetRefundReq) (*GetRefundResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefund not implemented")
}
func (UnimplementedPaymentServiceServer) VerifyPaymentStatus(context.Context, *VerifyPaymentStatusReq) (*VerifyPaymentStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPaymentStatus not implemented")
}
func (UnimplementedPaymentServiceServer) testEmbeddedByValue() {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_CreatePaymentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreatePaymentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreatePaymentOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreatePaymentOrder(ctx, req.(*CreatePaymentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetPaymentOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentOrder(ctx, req.(*GetPaymentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_HandlePaymentCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandlePaymentCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).HandlePaymentCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_HandlePaymentCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).HandlePaymentCallback(ctx, req.(*HandlePaymentCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreateRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRefundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreateRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreateRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreateRefund(ctx, req.(*CreateRefundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRefundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetRefund(ctx, req.(*GetRefundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_VerifyPaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPaymentStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).VerifyPaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_VerifyPaymentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).VerifyPaymentStatus(ctx, req.(*VerifyPaymentStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.payment.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePaymentOrder",
			Handler:    _PaymentService_CreatePaymentOrder_Handler,
		},
		{
			MethodName: "GetPaymentOrder",
			Handler:    _PaymentService_GetPaymentOrder_Handler,
		},
		{
			MethodName: "HandlePaymentCallback",
			Handler:    _PaymentService_HandlePaymentCallback_Handler,
		},
		{
			MethodName: "CreateRefund",
			Handler:    _PaymentService_CreateRefund_Handler,
		},
		{
			MethodName: "GetRefund",
			Handler:    _PaymentService_GetRefund_Handler,
		},
		{
			MethodName: "VerifyPaymentStatus",
			Handler:    _PaymentService_VerifyPaymentStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/inventory/payment/payment.proto",
}
