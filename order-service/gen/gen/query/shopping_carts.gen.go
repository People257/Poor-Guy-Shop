// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/people257/poor-guy-shop/order-service/gen/gen/model"
)

func newShoppingCart(db *gorm.DB, opts ...gen.DOOption) shoppingCart {
	_shoppingCart := shoppingCart{}

	_shoppingCart.shoppingCartDo.UseDB(db, opts...)
	_shoppingCart.shoppingCartDo.UseModel(&model.ShoppingCart{})

	tableName := _shoppingCart.shoppingCartDo.TableName()
	_shoppingCart.ALL = field.NewAsterisk(tableName)
	_shoppingCart.ID = field.NewString(tableName, "id")
	_shoppingCart.UserID = field.NewString(tableName, "user_id")
	_shoppingCart.ProductID = field.NewString(tableName, "product_id")
	_shoppingCart.SkuID = field.NewString(tableName, "sku_id")
	_shoppingCart.Quantity = field.NewInt32(tableName, "quantity")
	_shoppingCart.Price = field.NewField(tableName, "price")
	_shoppingCart.Selected = field.NewBool(tableName, "selected")
	_shoppingCart.CreatedAt = field.NewTime(tableName, "created_at")
	_shoppingCart.UpdatedAt = field.NewTime(tableName, "updated_at")
	_shoppingCart.DeletedAt = field.NewField(tableName, "deleted_at")
	_shoppingCart.Version = field.NewInt32(tableName, "version")

	_shoppingCart.fillFieldMap()

	return _shoppingCart
}

type shoppingCart struct {
	shoppingCartDo shoppingCartDo

	ALL       field.Asterisk
	ID        field.String
	UserID    field.String
	ProductID field.String
	SkuID     field.String
	Quantity  field.Int32
	Price     field.Field
	Selected  field.Bool
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Version   field.Int32

	fieldMap map[string]field.Expr
}

func (s shoppingCart) Table(newTableName string) *shoppingCart {
	s.shoppingCartDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shoppingCart) As(alias string) *shoppingCart {
	s.shoppingCartDo.DO = *(s.shoppingCartDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shoppingCart) updateTableName(table string) *shoppingCart {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.UserID = field.NewString(table, "user_id")
	s.ProductID = field.NewString(table, "product_id")
	s.SkuID = field.NewString(table, "sku_id")
	s.Quantity = field.NewInt32(table, "quantity")
	s.Price = field.NewField(table, "price")
	s.Selected = field.NewBool(table, "selected")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.Version = field.NewInt32(table, "version")

	s.fillFieldMap()

	return s
}

func (s *shoppingCart) WithContext(ctx context.Context) IShoppingCartDo {
	return s.shoppingCartDo.WithContext(ctx)
}

func (s shoppingCart) TableName() string { return s.shoppingCartDo.TableName() }

func (s shoppingCart) Alias() string { return s.shoppingCartDo.Alias() }

func (s shoppingCart) Columns(cols ...field.Expr) gen.Columns {
	return s.shoppingCartDo.Columns(cols...)
}

func (s *shoppingCart) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shoppingCart) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["product_id"] = s.ProductID
	s.fieldMap["sku_id"] = s.SkuID
	s.fieldMap["quantity"] = s.Quantity
	s.fieldMap["price"] = s.Price
	s.fieldMap["selected"] = s.Selected
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["version"] = s.Version
}

func (s shoppingCart) clone(db *gorm.DB) shoppingCart {
	s.shoppingCartDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shoppingCart) replaceDB(db *gorm.DB) shoppingCart {
	s.shoppingCartDo.ReplaceDB(db)
	return s
}

type shoppingCartDo struct{ gen.DO }

type IShoppingCartDo interface {
	gen.SubQuery
	Debug() IShoppingCartDo
	WithContext(ctx context.Context) IShoppingCartDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IShoppingCartDo
	WriteDB() IShoppingCartDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IShoppingCartDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IShoppingCartDo
	Not(conds ...gen.Condition) IShoppingCartDo
	Or(conds ...gen.Condition) IShoppingCartDo
	Select(conds ...field.Expr) IShoppingCartDo
	Where(conds ...gen.Condition) IShoppingCartDo
	Order(conds ...field.Expr) IShoppingCartDo
	Distinct(cols ...field.Expr) IShoppingCartDo
	Omit(cols ...field.Expr) IShoppingCartDo
	Join(table schema.Tabler, on ...field.Expr) IShoppingCartDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IShoppingCartDo
	RightJoin(table schema.Tabler, on ...field.Expr) IShoppingCartDo
	Group(cols ...field.Expr) IShoppingCartDo
	Having(conds ...gen.Condition) IShoppingCartDo
	Limit(limit int) IShoppingCartDo
	Offset(offset int) IShoppingCartDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IShoppingCartDo
	Unscoped() IShoppingCartDo
	Create(values ...*model.ShoppingCart) error
	CreateInBatches(values []*model.ShoppingCart, batchSize int) error
	Save(values ...*model.ShoppingCart) error
	First() (*model.ShoppingCart, error)
	Take() (*model.ShoppingCart, error)
	Last() (*model.ShoppingCart, error)
	Find() ([]*model.ShoppingCart, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ShoppingCart, err error)
	FindInBatches(result *[]*model.ShoppingCart, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ShoppingCart) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IShoppingCartDo
	Assign(attrs ...field.AssignExpr) IShoppingCartDo
	Joins(fields ...field.RelationField) IShoppingCartDo
	Preload(fields ...field.RelationField) IShoppingCartDo
	FirstOrInit() (*model.ShoppingCart, error)
	FirstOrCreate() (*model.ShoppingCart, error)
	FindByPage(offset int, limit int) (result []*model.ShoppingCart, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IShoppingCartDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s shoppingCartDo) Debug() IShoppingCartDo {
	return s.withDO(s.DO.Debug())
}

func (s shoppingCartDo) WithContext(ctx context.Context) IShoppingCartDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shoppingCartDo) ReadDB() IShoppingCartDo {
	return s.Clauses(dbresolver.Read)
}

func (s shoppingCartDo) WriteDB() IShoppingCartDo {
	return s.Clauses(dbresolver.Write)
}

func (s shoppingCartDo) Session(config *gorm.Session) IShoppingCartDo {
	return s.withDO(s.DO.Session(config))
}

func (s shoppingCartDo) Clauses(conds ...clause.Expression) IShoppingCartDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shoppingCartDo) Returning(value interface{}, columns ...string) IShoppingCartDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shoppingCartDo) Not(conds ...gen.Condition) IShoppingCartDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shoppingCartDo) Or(conds ...gen.Condition) IShoppingCartDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shoppingCartDo) Select(conds ...field.Expr) IShoppingCartDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shoppingCartDo) Where(conds ...gen.Condition) IShoppingCartDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shoppingCartDo) Order(conds ...field.Expr) IShoppingCartDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shoppingCartDo) Distinct(cols ...field.Expr) IShoppingCartDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shoppingCartDo) Omit(cols ...field.Expr) IShoppingCartDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shoppingCartDo) Join(table schema.Tabler, on ...field.Expr) IShoppingCartDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shoppingCartDo) LeftJoin(table schema.Tabler, on ...field.Expr) IShoppingCartDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shoppingCartDo) RightJoin(table schema.Tabler, on ...field.Expr) IShoppingCartDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shoppingCartDo) Group(cols ...field.Expr) IShoppingCartDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shoppingCartDo) Having(conds ...gen.Condition) IShoppingCartDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shoppingCartDo) Limit(limit int) IShoppingCartDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shoppingCartDo) Offset(offset int) IShoppingCartDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shoppingCartDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IShoppingCartDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shoppingCartDo) Unscoped() IShoppingCartDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shoppingCartDo) Create(values ...*model.ShoppingCart) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shoppingCartDo) CreateInBatches(values []*model.ShoppingCart, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shoppingCartDo) Save(values ...*model.ShoppingCart) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shoppingCartDo) First() (*model.ShoppingCart, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShoppingCart), nil
	}
}

func (s shoppingCartDo) Take() (*model.ShoppingCart, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShoppingCart), nil
	}
}

func (s shoppingCartDo) Last() (*model.ShoppingCart, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShoppingCart), nil
	}
}

func (s shoppingCartDo) Find() ([]*model.ShoppingCart, error) {
	result, err := s.DO.Find()
	return result.([]*model.ShoppingCart), err
}

func (s shoppingCartDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ShoppingCart, err error) {
	buf := make([]*model.ShoppingCart, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shoppingCartDo) FindInBatches(result *[]*model.ShoppingCart, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shoppingCartDo) Attrs(attrs ...field.AssignExpr) IShoppingCartDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shoppingCartDo) Assign(attrs ...field.AssignExpr) IShoppingCartDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shoppingCartDo) Joins(fields ...field.RelationField) IShoppingCartDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shoppingCartDo) Preload(fields ...field.RelationField) IShoppingCartDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shoppingCartDo) FirstOrInit() (*model.ShoppingCart, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShoppingCart), nil
	}
}

func (s shoppingCartDo) FirstOrCreate() (*model.ShoppingCart, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShoppingCart), nil
	}
}

func (s shoppingCartDo) FindByPage(offset int, limit int) (result []*model.ShoppingCart, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shoppingCartDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shoppingCartDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shoppingCartDo) Delete(models ...*model.ShoppingCart) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shoppingCartDo) withDO(do gen.Dao) *shoppingCartDo {
	s.DO = *do.(*gen.DO)
	return s
}
