// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	Order          *order
	OrderAddress   *orderAddress
	OrderItem      *orderItem
	OrderPayment   *orderPayment
	OrderStatusLog *orderStatusLog
	ShoppingCart   *shoppingCart
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Order = &Q.Order
	OrderAddress = &Q.OrderAddress
	OrderItem = &Q.OrderItem
	OrderPayment = &Q.OrderPayment
	OrderStatusLog = &Q.OrderStatusLog
	ShoppingCart = &Q.ShoppingCart
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		Order:          newOrder(db, opts...),
		OrderAddress:   newOrderAddress(db, opts...),
		OrderItem:      newOrderItem(db, opts...),
		OrderPayment:   newOrderPayment(db, opts...),
		OrderStatusLog: newOrderStatusLog(db, opts...),
		ShoppingCart:   newShoppingCart(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Order          order
	OrderAddress   orderAddress
	OrderItem      orderItem
	OrderPayment   orderPayment
	OrderStatusLog orderStatusLog
	ShoppingCart   shoppingCart
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Order:          q.Order.clone(db),
		OrderAddress:   q.OrderAddress.clone(db),
		OrderItem:      q.OrderItem.clone(db),
		OrderPayment:   q.OrderPayment.clone(db),
		OrderStatusLog: q.OrderStatusLog.clone(db),
		ShoppingCart:   q.ShoppingCart.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Order:          q.Order.replaceDB(db),
		OrderAddress:   q.OrderAddress.replaceDB(db),
		OrderItem:      q.OrderItem.replaceDB(db),
		OrderPayment:   q.OrderPayment.replaceDB(db),
		OrderStatusLog: q.OrderStatusLog.replaceDB(db),
		ShoppingCart:   q.ShoppingCart.replaceDB(db),
	}
}

type queryCtx struct {
	Order          IOrderDo
	OrderAddress   IOrderAddressDo
	OrderItem      IOrderItemDo
	OrderPayment   IOrderPaymentDo
	OrderStatusLog IOrderStatusLogDo
	ShoppingCart   IShoppingCartDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Order:          q.Order.WithContext(ctx),
		OrderAddress:   q.OrderAddress.WithContext(ctx),
		OrderItem:      q.OrderItem.WithContext(ctx),
		OrderPayment:   q.OrderPayment.WithContext(ctx),
		OrderStatusLog: q.OrderStatusLog.WithContext(ctx),
		ShoppingCart:   q.ShoppingCart.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
