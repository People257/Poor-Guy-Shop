// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/people257/poor-guy-shop/order-service/gen/gen/model"
)

func newOrderAddress(db *gorm.DB, opts ...gen.DOOption) orderAddress {
	_orderAddress := orderAddress{}

	_orderAddress.orderAddressDo.UseDB(db, opts...)
	_orderAddress.orderAddressDo.UseModel(&model.OrderAddress{})

	tableName := _orderAddress.orderAddressDo.TableName()
	_orderAddress.ALL = field.NewAsterisk(tableName)
	_orderAddress.ID = field.NewString(tableName, "id")
	_orderAddress.OrderID = field.NewString(tableName, "order_id")
	_orderAddress.ReceiverName = field.NewString(tableName, "receiver_name")
	_orderAddress.ReceiverPhone = field.NewString(tableName, "receiver_phone")
	_orderAddress.Province = field.NewString(tableName, "province")
	_orderAddress.City = field.NewString(tableName, "city")
	_orderAddress.District = field.NewString(tableName, "district")
	_orderAddress.Address = field.NewString(tableName, "address")
	_orderAddress.PostalCode = field.NewString(tableName, "postal_code")
	_orderAddress.CreatedAt = field.NewTime(tableName, "created_at")
	_orderAddress.UpdatedAt = field.NewTime(tableName, "updated_at")
	_orderAddress.DeletedAt = field.NewField(tableName, "deleted_at")
	_orderAddress.Version = field.NewInt32(tableName, "version")

	_orderAddress.fillFieldMap()

	return _orderAddress
}

type orderAddress struct {
	orderAddressDo orderAddressDo

	ALL           field.Asterisk
	ID            field.String
	OrderID       field.String
	ReceiverName  field.String
	ReceiverPhone field.String
	Province      field.String
	City          field.String
	District      field.String
	Address       field.String
	PostalCode    field.String
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Version       field.Int32

	fieldMap map[string]field.Expr
}

func (o orderAddress) Table(newTableName string) *orderAddress {
	o.orderAddressDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderAddress) As(alias string) *orderAddress {
	o.orderAddressDo.DO = *(o.orderAddressDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderAddress) updateTableName(table string) *orderAddress {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewString(table, "id")
	o.OrderID = field.NewString(table, "order_id")
	o.ReceiverName = field.NewString(table, "receiver_name")
	o.ReceiverPhone = field.NewString(table, "receiver_phone")
	o.Province = field.NewString(table, "province")
	o.City = field.NewString(table, "city")
	o.District = field.NewString(table, "district")
	o.Address = field.NewString(table, "address")
	o.PostalCode = field.NewString(table, "postal_code")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.Version = field.NewInt32(table, "version")

	o.fillFieldMap()

	return o
}

func (o *orderAddress) WithContext(ctx context.Context) IOrderAddressDo {
	return o.orderAddressDo.WithContext(ctx)
}

func (o orderAddress) TableName() string { return o.orderAddressDo.TableName() }

func (o orderAddress) Alias() string { return o.orderAddressDo.Alias() }

func (o orderAddress) Columns(cols ...field.Expr) gen.Columns {
	return o.orderAddressDo.Columns(cols...)
}

func (o *orderAddress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderAddress) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 13)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["receiver_name"] = o.ReceiverName
	o.fieldMap["receiver_phone"] = o.ReceiverPhone
	o.fieldMap["province"] = o.Province
	o.fieldMap["city"] = o.City
	o.fieldMap["district"] = o.District
	o.fieldMap["address"] = o.Address
	o.fieldMap["postal_code"] = o.PostalCode
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["version"] = o.Version
}

func (o orderAddress) clone(db *gorm.DB) orderAddress {
	o.orderAddressDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderAddress) replaceDB(db *gorm.DB) orderAddress {
	o.orderAddressDo.ReplaceDB(db)
	return o
}

type orderAddressDo struct{ gen.DO }

type IOrderAddressDo interface {
	gen.SubQuery
	Debug() IOrderAddressDo
	WithContext(ctx context.Context) IOrderAddressDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderAddressDo
	WriteDB() IOrderAddressDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderAddressDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderAddressDo
	Not(conds ...gen.Condition) IOrderAddressDo
	Or(conds ...gen.Condition) IOrderAddressDo
	Select(conds ...field.Expr) IOrderAddressDo
	Where(conds ...gen.Condition) IOrderAddressDo
	Order(conds ...field.Expr) IOrderAddressDo
	Distinct(cols ...field.Expr) IOrderAddressDo
	Omit(cols ...field.Expr) IOrderAddressDo
	Join(table schema.Tabler, on ...field.Expr) IOrderAddressDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderAddressDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderAddressDo
	Group(cols ...field.Expr) IOrderAddressDo
	Having(conds ...gen.Condition) IOrderAddressDo
	Limit(limit int) IOrderAddressDo
	Offset(offset int) IOrderAddressDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderAddressDo
	Unscoped() IOrderAddressDo
	Create(values ...*model.OrderAddress) error
	CreateInBatches(values []*model.OrderAddress, batchSize int) error
	Save(values ...*model.OrderAddress) error
	First() (*model.OrderAddress, error)
	Take() (*model.OrderAddress, error)
	Last() (*model.OrderAddress, error)
	Find() ([]*model.OrderAddress, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderAddress, err error)
	FindInBatches(result *[]*model.OrderAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrderAddress) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderAddressDo
	Assign(attrs ...field.AssignExpr) IOrderAddressDo
	Joins(fields ...field.RelationField) IOrderAddressDo
	Preload(fields ...field.RelationField) IOrderAddressDo
	FirstOrInit() (*model.OrderAddress, error)
	FirstOrCreate() (*model.OrderAddress, error)
	FindByPage(offset int, limit int) (result []*model.OrderAddress, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderAddressDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderAddressDo) Debug() IOrderAddressDo {
	return o.withDO(o.DO.Debug())
}

func (o orderAddressDo) WithContext(ctx context.Context) IOrderAddressDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderAddressDo) ReadDB() IOrderAddressDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderAddressDo) WriteDB() IOrderAddressDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderAddressDo) Session(config *gorm.Session) IOrderAddressDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderAddressDo) Clauses(conds ...clause.Expression) IOrderAddressDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderAddressDo) Returning(value interface{}, columns ...string) IOrderAddressDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderAddressDo) Not(conds ...gen.Condition) IOrderAddressDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderAddressDo) Or(conds ...gen.Condition) IOrderAddressDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderAddressDo) Select(conds ...field.Expr) IOrderAddressDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderAddressDo) Where(conds ...gen.Condition) IOrderAddressDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderAddressDo) Order(conds ...field.Expr) IOrderAddressDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderAddressDo) Distinct(cols ...field.Expr) IOrderAddressDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderAddressDo) Omit(cols ...field.Expr) IOrderAddressDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderAddressDo) Join(table schema.Tabler, on ...field.Expr) IOrderAddressDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderAddressDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderAddressDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderAddressDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderAddressDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderAddressDo) Group(cols ...field.Expr) IOrderAddressDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderAddressDo) Having(conds ...gen.Condition) IOrderAddressDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderAddressDo) Limit(limit int) IOrderAddressDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderAddressDo) Offset(offset int) IOrderAddressDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderAddressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderAddressDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderAddressDo) Unscoped() IOrderAddressDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderAddressDo) Create(values ...*model.OrderAddress) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderAddressDo) CreateInBatches(values []*model.OrderAddress, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderAddressDo) Save(values ...*model.OrderAddress) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderAddressDo) First() (*model.OrderAddress, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderAddress), nil
	}
}

func (o orderAddressDo) Take() (*model.OrderAddress, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderAddress), nil
	}
}

func (o orderAddressDo) Last() (*model.OrderAddress, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderAddress), nil
	}
}

func (o orderAddressDo) Find() ([]*model.OrderAddress, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderAddress), err
}

func (o orderAddressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderAddress, err error) {
	buf := make([]*model.OrderAddress, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderAddressDo) FindInBatches(result *[]*model.OrderAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderAddressDo) Attrs(attrs ...field.AssignExpr) IOrderAddressDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderAddressDo) Assign(attrs ...field.AssignExpr) IOrderAddressDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderAddressDo) Joins(fields ...field.RelationField) IOrderAddressDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderAddressDo) Preload(fields ...field.RelationField) IOrderAddressDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderAddressDo) FirstOrInit() (*model.OrderAddress, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderAddress), nil
	}
}

func (o orderAddressDo) FirstOrCreate() (*model.OrderAddress, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderAddress), nil
	}
}

func (o orderAddressDo) FindByPage(offset int, limit int) (result []*model.OrderAddress, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderAddressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderAddressDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderAddressDo) Delete(models ...*model.OrderAddress) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderAddressDo) withDO(do gen.Dao) *orderAddressDo {
	o.DO = *do.(*gen.DO)
	return o
}
