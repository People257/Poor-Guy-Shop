// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/people257/poor-guy-shop/order-service/gen/gen/model"
)

func newOrderStatusLog(db *gorm.DB, opts ...gen.DOOption) orderStatusLog {
	_orderStatusLog := orderStatusLog{}

	_orderStatusLog.orderStatusLogDo.UseDB(db, opts...)
	_orderStatusLog.orderStatusLogDo.UseModel(&model.OrderStatusLog{})

	tableName := _orderStatusLog.orderStatusLogDo.TableName()
	_orderStatusLog.ALL = field.NewAsterisk(tableName)
	_orderStatusLog.ID = field.NewString(tableName, "id")
	_orderStatusLog.OrderID = field.NewString(tableName, "order_id")
	_orderStatusLog.FromStatus = field.NewInt32(tableName, "from_status")
	_orderStatusLog.ToStatus = field.NewInt32(tableName, "to_status")
	_orderStatusLog.OperatorID = field.NewString(tableName, "operator_id")
	_orderStatusLog.OperatorType = field.NewString(tableName, "operator_type")
	_orderStatusLog.Remark = field.NewString(tableName, "remark")
	_orderStatusLog.CreatedAt = field.NewTime(tableName, "created_at")

	_orderStatusLog.fillFieldMap()

	return _orderStatusLog
}

type orderStatusLog struct {
	orderStatusLogDo orderStatusLogDo

	ALL          field.Asterisk
	ID           field.String
	OrderID      field.String
	FromStatus   field.Int32
	ToStatus     field.Int32
	OperatorID   field.String
	OperatorType field.String
	Remark       field.String
	CreatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (o orderStatusLog) Table(newTableName string) *orderStatusLog {
	o.orderStatusLogDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderStatusLog) As(alias string) *orderStatusLog {
	o.orderStatusLogDo.DO = *(o.orderStatusLogDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderStatusLog) updateTableName(table string) *orderStatusLog {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewString(table, "id")
	o.OrderID = field.NewString(table, "order_id")
	o.FromStatus = field.NewInt32(table, "from_status")
	o.ToStatus = field.NewInt32(table, "to_status")
	o.OperatorID = field.NewString(table, "operator_id")
	o.OperatorType = field.NewString(table, "operator_type")
	o.Remark = field.NewString(table, "remark")
	o.CreatedAt = field.NewTime(table, "created_at")

	o.fillFieldMap()

	return o
}

func (o *orderStatusLog) WithContext(ctx context.Context) IOrderStatusLogDo {
	return o.orderStatusLogDo.WithContext(ctx)
}

func (o orderStatusLog) TableName() string { return o.orderStatusLogDo.TableName() }

func (o orderStatusLog) Alias() string { return o.orderStatusLogDo.Alias() }

func (o orderStatusLog) Columns(cols ...field.Expr) gen.Columns {
	return o.orderStatusLogDo.Columns(cols...)
}

func (o *orderStatusLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderStatusLog) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 8)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["from_status"] = o.FromStatus
	o.fieldMap["to_status"] = o.ToStatus
	o.fieldMap["operator_id"] = o.OperatorID
	o.fieldMap["operator_type"] = o.OperatorType
	o.fieldMap["remark"] = o.Remark
	o.fieldMap["created_at"] = o.CreatedAt
}

func (o orderStatusLog) clone(db *gorm.DB) orderStatusLog {
	o.orderStatusLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderStatusLog) replaceDB(db *gorm.DB) orderStatusLog {
	o.orderStatusLogDo.ReplaceDB(db)
	return o
}

type orderStatusLogDo struct{ gen.DO }

type IOrderStatusLogDo interface {
	gen.SubQuery
	Debug() IOrderStatusLogDo
	WithContext(ctx context.Context) IOrderStatusLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderStatusLogDo
	WriteDB() IOrderStatusLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderStatusLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderStatusLogDo
	Not(conds ...gen.Condition) IOrderStatusLogDo
	Or(conds ...gen.Condition) IOrderStatusLogDo
	Select(conds ...field.Expr) IOrderStatusLogDo
	Where(conds ...gen.Condition) IOrderStatusLogDo
	Order(conds ...field.Expr) IOrderStatusLogDo
	Distinct(cols ...field.Expr) IOrderStatusLogDo
	Omit(cols ...field.Expr) IOrderStatusLogDo
	Join(table schema.Tabler, on ...field.Expr) IOrderStatusLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderStatusLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderStatusLogDo
	Group(cols ...field.Expr) IOrderStatusLogDo
	Having(conds ...gen.Condition) IOrderStatusLogDo
	Limit(limit int) IOrderStatusLogDo
	Offset(offset int) IOrderStatusLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderStatusLogDo
	Unscoped() IOrderStatusLogDo
	Create(values ...*model.OrderStatusLog) error
	CreateInBatches(values []*model.OrderStatusLog, batchSize int) error
	Save(values ...*model.OrderStatusLog) error
	First() (*model.OrderStatusLog, error)
	Take() (*model.OrderStatusLog, error)
	Last() (*model.OrderStatusLog, error)
	Find() ([]*model.OrderStatusLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderStatusLog, err error)
	FindInBatches(result *[]*model.OrderStatusLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrderStatusLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderStatusLogDo
	Assign(attrs ...field.AssignExpr) IOrderStatusLogDo
	Joins(fields ...field.RelationField) IOrderStatusLogDo
	Preload(fields ...field.RelationField) IOrderStatusLogDo
	FirstOrInit() (*model.OrderStatusLog, error)
	FirstOrCreate() (*model.OrderStatusLog, error)
	FindByPage(offset int, limit int) (result []*model.OrderStatusLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderStatusLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderStatusLogDo) Debug() IOrderStatusLogDo {
	return o.withDO(o.DO.Debug())
}

func (o orderStatusLogDo) WithContext(ctx context.Context) IOrderStatusLogDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderStatusLogDo) ReadDB() IOrderStatusLogDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderStatusLogDo) WriteDB() IOrderStatusLogDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderStatusLogDo) Session(config *gorm.Session) IOrderStatusLogDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderStatusLogDo) Clauses(conds ...clause.Expression) IOrderStatusLogDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderStatusLogDo) Returning(value interface{}, columns ...string) IOrderStatusLogDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderStatusLogDo) Not(conds ...gen.Condition) IOrderStatusLogDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderStatusLogDo) Or(conds ...gen.Condition) IOrderStatusLogDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderStatusLogDo) Select(conds ...field.Expr) IOrderStatusLogDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderStatusLogDo) Where(conds ...gen.Condition) IOrderStatusLogDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderStatusLogDo) Order(conds ...field.Expr) IOrderStatusLogDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderStatusLogDo) Distinct(cols ...field.Expr) IOrderStatusLogDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderStatusLogDo) Omit(cols ...field.Expr) IOrderStatusLogDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderStatusLogDo) Join(table schema.Tabler, on ...field.Expr) IOrderStatusLogDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderStatusLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderStatusLogDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderStatusLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderStatusLogDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderStatusLogDo) Group(cols ...field.Expr) IOrderStatusLogDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderStatusLogDo) Having(conds ...gen.Condition) IOrderStatusLogDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderStatusLogDo) Limit(limit int) IOrderStatusLogDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderStatusLogDo) Offset(offset int) IOrderStatusLogDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderStatusLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderStatusLogDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderStatusLogDo) Unscoped() IOrderStatusLogDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderStatusLogDo) Create(values ...*model.OrderStatusLog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderStatusLogDo) CreateInBatches(values []*model.OrderStatusLog, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderStatusLogDo) Save(values ...*model.OrderStatusLog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderStatusLogDo) First() (*model.OrderStatusLog, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderStatusLog), nil
	}
}

func (o orderStatusLogDo) Take() (*model.OrderStatusLog, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderStatusLog), nil
	}
}

func (o orderStatusLogDo) Last() (*model.OrderStatusLog, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderStatusLog), nil
	}
}

func (o orderStatusLogDo) Find() ([]*model.OrderStatusLog, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderStatusLog), err
}

func (o orderStatusLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderStatusLog, err error) {
	buf := make([]*model.OrderStatusLog, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderStatusLogDo) FindInBatches(result *[]*model.OrderStatusLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderStatusLogDo) Attrs(attrs ...field.AssignExpr) IOrderStatusLogDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderStatusLogDo) Assign(attrs ...field.AssignExpr) IOrderStatusLogDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderStatusLogDo) Joins(fields ...field.RelationField) IOrderStatusLogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderStatusLogDo) Preload(fields ...field.RelationField) IOrderStatusLogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderStatusLogDo) FirstOrInit() (*model.OrderStatusLog, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderStatusLog), nil
	}
}

func (o orderStatusLogDo) FirstOrCreate() (*model.OrderStatusLog, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderStatusLog), nil
	}
}

func (o orderStatusLogDo) FindByPage(offset int, limit int) (result []*model.OrderStatusLog, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderStatusLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderStatusLogDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderStatusLogDo) Delete(models ...*model.OrderStatusLog) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderStatusLogDo) withDO(do gen.Dao) *orderStatusLogDo {
	o.DO = *do.(*gen.DO)
	return o
}
