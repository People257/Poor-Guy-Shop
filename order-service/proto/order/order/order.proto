syntax = "proto3";

package order.order;

option go_package = "github.com/people257/poor-guy-shop/order-service/gen/proto/order/order";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// 订单服务
service OrderService {
  // 创建订单
  rpc CreateOrder(CreateOrderReq) returns (CreateOrderResp) {
    option (google.api.http) = {
      post: "/api/v1/orders"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "创建订单";
      description: "根据购物车商品创建新订单";
    };
  }

  // 获取订单详情
  rpc GetOrder(GetOrderReq) returns (GetOrderResp) {
    option (google.api.http) = {
      get: "/api/v1/orders/{order_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取订单详情";
      description: "根据订单ID获取订单详细信息";
    };
  }

  // 获取订单列表
  rpc ListOrders(ListOrdersReq) returns (ListOrdersResp) {
    option (google.api.http) = {
      get: "/api/v1/orders"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取订单列表";
      description: "获取用户订单列表，支持分页和筛选";
    };
  }

  // 取消订单
  rpc CancelOrder(CancelOrderReq) returns (CancelOrderResp) {
    option (google.api.http) = {
      post: "/api/v1/orders/{order_id}/cancel"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "取消订单";
      description: "取消指定订单";
    };
  }

  // 确认收货
  rpc ConfirmOrder(ConfirmOrderReq) returns (ConfirmOrderResp) {
    option (google.api.http) = {
      post: "/api/v1/orders/{order_id}/confirm"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "确认收货";
      description: "确认收货完成订单";
    };
  }

  // 支付订单
  rpc PayOrder(PayOrderReq) returns (PayOrderResp) {
    option (google.api.http) = {
      post: "/api/v1/orders/{order_id}/pay"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "支付订单";
      description: "处理订单支付";
    };
  }

  // 更新订单状态
  rpc UpdateOrderStatus(UpdateOrderStatusReq) returns (UpdateOrderStatusResp) {
    option (google.api.http) = {
      put: "/api/v1/orders/{order_id}/status"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "更新订单状态";
      description: "更新订单状态";
    };
  }
}

// 订单状态枚举
enum OrderStatus {
  ORDER_STATUS_UNKNOWN = 0;
  ORDER_STATUS_PENDING_PAYMENT = 1;  // 待付款
  ORDER_STATUS_PAID = 2;             // 已付款
  ORDER_STATUS_SHIPPED = 3;          // 已发货
  ORDER_STATUS_DELIVERED = 4;        // 已收货
  ORDER_STATUS_CANCELLED = 5;        // 已取消
  ORDER_STATUS_REFUNDED = 6;         // 已退款
}

// 支付方式枚举
enum PaymentMethod {
  PAYMENT_METHOD_UNKNOWN = 0;
  PAYMENT_METHOD_ALIPAY = 1;    // 支付宝
  PAYMENT_METHOD_WECHAT = 2;    // 微信支付
  PAYMENT_METHOD_BALANCE = 3;   // 余额支付
}

// 订单信息
message Order {
  string id = 1;
  string order_no = 2;
  string user_id = 3;
  OrderStatus status = 4;
  string total_amount = 5;        // 使用string存储decimal
  string discount_amount = 6;     // 优惠金额
  string shipping_fee = 7;        // 运费
  string actual_amount = 8;       // 实付金额
  PaymentMethod payment_method = 9;
  int32 payment_status = 10;
  google.protobuf.Timestamp payment_time = 11;
  google.protobuf.Timestamp delivery_time = 12;
  google.protobuf.Timestamp receive_time = 13;
  google.protobuf.Timestamp cancel_time = 14;
  string cancel_reason = 15;
  string remark = 16;
  google.protobuf.Timestamp created_at = 17;
  google.protobuf.Timestamp updated_at = 18;
  repeated OrderItem items = 19;
  OrderAddress address = 20;
}

// 订单商品信息
message OrderItem {
  string id = 1;
  string product_id = 2;
  string sku_id = 3;
  string product_name = 4;
  string product_image = 5;
  string sku_name = 6;
  string price = 7;               // 使用string存储decimal
  int32 quantity = 8;
  string total_amount = 9;        // 小计金额
}

// 订单收货地址
message OrderAddress {
  string id = 1;
  string receiver_name = 2;
  string receiver_phone = 3;
  string province = 4;
  string city = 5;
  string district = 6;
  string address = 7;
  string postal_code = 8;
}

// 创建订单请求
message CreateOrderReq {
  string user_id = 1;                     // 用户ID
  repeated OrderItemReq items = 2;        // 订单商品项
  OrderAddressReq address = 3;            // 收货地址
  string payment_method = 4;              // 支付方式
  string remark = 5;                      // 订单备注
  string discount_amount = 6;             // 优惠金额
  string shipping_fee = 7;                // 运费
}

// 订单商品项请求
message OrderItemReq {
  string product_id = 1;     // 商品ID
  string sku_id = 2;         // SKU ID
  int32 quantity = 3;        // 数量
  string price = 4;          // 价格
  string product_name = 5;   // 商品名称
  string sku_name = 6;       // SKU名称
}

// 订单地址请求
message OrderAddressReq {
  string receiver_name = 1;   // 收货人姓名
  string receiver_phone = 2;  // 收货人电话
  string province = 3;        // 省份
  string city = 4;            // 城市
  string district = 5;        // 区县
  string detail_address = 6;  // 详细地址
  string postal_code = 7;     // 邮政编码
}

// 创建订单响应
message CreateOrderResp {
  Order order = 1;
}

// 获取订单详情请求
message GetOrderReq {
  string order_id = 1;
  string user_id = 2;
}

// 获取订单详情响应
message GetOrderResp {
  Order order = 1;
}

// 获取订单列表请求
message ListOrdersReq {
  string user_id = 1;
  int32 page = 2;
  int32 page_size = 3;
  int32 status = 4;
  string start_date = 5;
  string end_date = 6;
}

// 获取订单列表响应
message ListOrdersResp {
  repeated Order orders = 1;
  int64 total = 2;
  int32 page = 3;
  int32 page_size = 4;
  int32 total_pages = 5;
}

// 取消订单请求
message CancelOrderReq {
  string order_id = 1;
  string user_id = 2;
  string reason = 3;
}

// 取消订单响应
message CancelOrderResp {
  bool success = 1;
}

// 确认收货请求
message ConfirmOrderReq {
  string order_id = 1;
}

// 确认收货响应
message ConfirmOrderResp {
  bool success = 1;
}

// 支付订单请求
message PayOrderReq {
  string order_id = 1;
  string user_id = 2;
  string payment_method = 3;
}

// 支付订单响应
message PayOrderResp {
  bool success = 1;
  string payment_no = 2;     // 支付流水号
  string third_party_url = 3; // 第三方支付URL（如支付宝、微信）
}

// 更新订单状态请求
message UpdateOrderStatusReq {
  string order_id = 1;       // 订单ID
  string user_id = 2;        // 用户ID
  int32 status = 3;          // 新状态
  string reason = 4;         // 更新原因
}

// 更新订单状态响应
message UpdateOrderStatusResp {
  bool success = 1;
}
