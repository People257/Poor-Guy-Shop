// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package gateway

import (
	"context"
	"poor-guy-shop/common/gateway/config"
	"poor-guy-shop/common/gateway/internal"
)

// Injectors from wire.go:

func InitializeGateway(ctx context.Context, cfg *config.GatewayConfig) (*Gateway, func()) {
	serveMux := internal.NewGatewayMux()
	serverConfig := config.GetServerConfig(cfg)
	logConfig := config.GetLogConfig(cfg)
	observabilityConfig := config.GetObservabilityConfig(cfg)
	exporter, cleanup := internal.NewLogExporter(ctx, observabilityConfig)
	loggerProvider, cleanup2 := internal.NewLoggerProvider(exporter, serverConfig, observabilityConfig)
	logger, cleanup3 := internal.NewZapLogger(serverConfig, logConfig, observabilityConfig, loggerProvider)
	echo, cleanup4 := internal.NewEcho(serveMux, logger, serverConfig)
	server, cleanup5 := internal.NewObservabilityHttpServer(observabilityConfig)
	registryConfig := config.GetRegistryConfig(cfg)
	clientConn, cleanup6 := internal.NewGrpcClient(registryConfig)
	sampler := internal.NewSampler(observabilityConfig)
	spanExporter, cleanup7 := internal.NewTraceExporter(ctx, observabilityConfig)
	tracerProvider, cleanup8 := internal.NewTracerProvider(sampler, spanExporter, serverConfig, observabilityConfig)
	metricExporter := internal.NewMetricExporter(ctx, observabilityConfig)
	meterProvider, cleanup9 := internal.NewMeterProvider(observabilityConfig, serverConfig, metricExporter)
	gateway := newGateway(echo, cfg, server, clientConn, serveMux, tracerProvider, meterProvider)
	return gateway, func() {
		cleanup9()
		cleanup8()
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}
}
