// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"context"
	"github.com/people257/poor-guy-shop/common/server"
	brand3 "github.com/people257/poor-guy-shop/product-service/api/brand"
	category3 "github.com/people257/poor-guy-shop/product-service/api/category"
	product3 "github.com/people257/poor-guy-shop/product-service/api/product"
	"github.com/people257/poor-guy-shop/product-service/cmd/grpc/config"
	"github.com/people257/poor-guy-shop/product-service/cmd/grpc/internal"
	brand2 "github.com/people257/poor-guy-shop/product-service/internal/application/brand"
	category2 "github.com/people257/poor-guy-shop/product-service/internal/application/category"
	product2 "github.com/people257/poor-guy-shop/product-service/internal/application/product"
	"github.com/people257/poor-guy-shop/product-service/internal/domain/brand"
	"github.com/people257/poor-guy-shop/product-service/internal/domain/category"
	"github.com/people257/poor-guy-shop/product-service/internal/domain/product"
	"github.com/people257/poor-guy-shop/product-service/internal/infra/repository"
)

// Injectors from wire.go:

// InitializeApplication 初始化应用程序
func InitializeApplication(ctx context.Context, configPath2 string) (*Application, func()) {
	configConfig := config.MustLoad(configPath2)
	grpcServerConfig := config.GetGrpcServerConfig(configConfig)
	serverServer, cleanup := server.InitializeServer(ctx, grpcServerConfig)
	databaseConfig := config.GetDBConfig(configConfig)
	database := internal.NewDatabase(databaseConfig)
	db := internal.ProvideGORMDB(database)
	categoryRepository := repository.NewCategoryRepository(db)
	domainService := category.NewDomainService(categoryRepository)
	service := category2.NewService(domainService, categoryRepository)
	categoryServer := category3.NewCategoryServer(service)
	brandRepository := repository.NewBrandRepository(db)
	brandDomainService := brand.NewDomainService(brandRepository)
	brandService := brand2.NewService(brandDomainService, brandRepository)
	brandServer := brand3.NewBrandServer(brandService)
	productRepository := repository.NewProductRepository(db)
	skuRepository := repository.NewProductSKURepository(db)
	productDomainService := product.NewDomainService(productRepository, skuRepository)
	productService := product2.NewService(productDomainService, productRepository, skuRepository)
	productServer := product3.NewProductServer(productService)
	application := NewApplication(serverServer, categoryServer, brandServer, productServer)
	return application, func() {
		cleanup()
	}
}

