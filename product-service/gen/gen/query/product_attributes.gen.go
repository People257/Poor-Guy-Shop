// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/people257/poor-guy-shop/product-service/gen/gen/model"
)

func newProductAttribute(db *gorm.DB, opts ...gen.DOOption) productAttribute {
	_productAttribute := productAttribute{}

	_productAttribute.productAttributeDo.UseDB(db, opts...)
	_productAttribute.productAttributeDo.UseModel(&model.ProductAttribute{})

	tableName := _productAttribute.productAttributeDo.TableName()
	_productAttribute.ALL = field.NewAsterisk(tableName)
	_productAttribute.ID = field.NewString(tableName, "id")
	_productAttribute.Name = field.NewString(tableName, "name")
	_productAttribute.DisplayName = field.NewString(tableName, "display_name")
	_productAttribute.AttributeType = field.NewString(tableName, "attribute_type")
	_productAttribute.IsRequired = field.NewBool(tableName, "is_required")
	_productAttribute.IsVariant = field.NewBool(tableName, "is_variant")
	_productAttribute.SortOrder = field.NewInt32(tableName, "sort_order")
	_productAttribute.Options = field.NewString(tableName, "options")
	_productAttribute.CreatedAt = field.NewTime(tableName, "created_at")
	_productAttribute.UpdatedAt = field.NewTime(tableName, "updated_at")

	_productAttribute.fillFieldMap()

	return _productAttribute
}

type productAttribute struct {
	productAttributeDo productAttributeDo

	ALL           field.Asterisk
	ID            field.String // 属性ID
	Name          field.String // 属性名称，如：颜色、尺寸、材质
	DisplayName   field.String // 显示名称
	AttributeType field.String // 属性类型: text, number, select, multiselect, boolean
	IsRequired    field.Bool   // 是否必填
	IsVariant     field.Bool   // 是否影响SKU变体
	SortOrder     field.Int32  // 排序权重
	Options       field.String // 属性选项 [{"value": "red", "label": "红色"}, {"value": "blue", "label": "蓝色"}]
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (p productAttribute) Table(newTableName string) *productAttribute {
	p.productAttributeDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p productAttribute) As(alias string) *productAttribute {
	p.productAttributeDo.DO = *(p.productAttributeDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *productAttribute) updateTableName(table string) *productAttribute {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.Name = field.NewString(table, "name")
	p.DisplayName = field.NewString(table, "display_name")
	p.AttributeType = field.NewString(table, "attribute_type")
	p.IsRequired = field.NewBool(table, "is_required")
	p.IsVariant = field.NewBool(table, "is_variant")
	p.SortOrder = field.NewInt32(table, "sort_order")
	p.Options = field.NewString(table, "options")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *productAttribute) WithContext(ctx context.Context) IProductAttributeDo {
	return p.productAttributeDo.WithContext(ctx)
}

func (p productAttribute) TableName() string { return p.productAttributeDo.TableName() }

func (p productAttribute) Alias() string { return p.productAttributeDo.Alias() }

func (p productAttribute) Columns(cols ...field.Expr) gen.Columns {
	return p.productAttributeDo.Columns(cols...)
}

func (p *productAttribute) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *productAttribute) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["display_name"] = p.DisplayName
	p.fieldMap["attribute_type"] = p.AttributeType
	p.fieldMap["is_required"] = p.IsRequired
	p.fieldMap["is_variant"] = p.IsVariant
	p.fieldMap["sort_order"] = p.SortOrder
	p.fieldMap["options"] = p.Options
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p productAttribute) clone(db *gorm.DB) productAttribute {
	p.productAttributeDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p productAttribute) replaceDB(db *gorm.DB) productAttribute {
	p.productAttributeDo.ReplaceDB(db)
	return p
}

type productAttributeDo struct{ gen.DO }

type IProductAttributeDo interface {
	gen.SubQuery
	Debug() IProductAttributeDo
	WithContext(ctx context.Context) IProductAttributeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProductAttributeDo
	WriteDB() IProductAttributeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProductAttributeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProductAttributeDo
	Not(conds ...gen.Condition) IProductAttributeDo
	Or(conds ...gen.Condition) IProductAttributeDo
	Select(conds ...field.Expr) IProductAttributeDo
	Where(conds ...gen.Condition) IProductAttributeDo
	Order(conds ...field.Expr) IProductAttributeDo
	Distinct(cols ...field.Expr) IProductAttributeDo
	Omit(cols ...field.Expr) IProductAttributeDo
	Join(table schema.Tabler, on ...field.Expr) IProductAttributeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProductAttributeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProductAttributeDo
	Group(cols ...field.Expr) IProductAttributeDo
	Having(conds ...gen.Condition) IProductAttributeDo
	Limit(limit int) IProductAttributeDo
	Offset(offset int) IProductAttributeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProductAttributeDo
	Unscoped() IProductAttributeDo
	Create(values ...*model.ProductAttribute) error
	CreateInBatches(values []*model.ProductAttribute, batchSize int) error
	Save(values ...*model.ProductAttribute) error
	First() (*model.ProductAttribute, error)
	Take() (*model.ProductAttribute, error)
	Last() (*model.ProductAttribute, error)
	Find() ([]*model.ProductAttribute, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductAttribute, err error)
	FindInBatches(result *[]*model.ProductAttribute, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProductAttribute) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProductAttributeDo
	Assign(attrs ...field.AssignExpr) IProductAttributeDo
	Joins(fields ...field.RelationField) IProductAttributeDo
	Preload(fields ...field.RelationField) IProductAttributeDo
	FirstOrInit() (*model.ProductAttribute, error)
	FirstOrCreate() (*model.ProductAttribute, error)
	FindByPage(offset int, limit int) (result []*model.ProductAttribute, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProductAttributeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p productAttributeDo) Debug() IProductAttributeDo {
	return p.withDO(p.DO.Debug())
}

func (p productAttributeDo) WithContext(ctx context.Context) IProductAttributeDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productAttributeDo) ReadDB() IProductAttributeDo {
	return p.Clauses(dbresolver.Read)
}

func (p productAttributeDo) WriteDB() IProductAttributeDo {
	return p.Clauses(dbresolver.Write)
}

func (p productAttributeDo) Session(config *gorm.Session) IProductAttributeDo {
	return p.withDO(p.DO.Session(config))
}

func (p productAttributeDo) Clauses(conds ...clause.Expression) IProductAttributeDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productAttributeDo) Returning(value interface{}, columns ...string) IProductAttributeDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productAttributeDo) Not(conds ...gen.Condition) IProductAttributeDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productAttributeDo) Or(conds ...gen.Condition) IProductAttributeDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productAttributeDo) Select(conds ...field.Expr) IProductAttributeDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productAttributeDo) Where(conds ...gen.Condition) IProductAttributeDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productAttributeDo) Order(conds ...field.Expr) IProductAttributeDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productAttributeDo) Distinct(cols ...field.Expr) IProductAttributeDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productAttributeDo) Omit(cols ...field.Expr) IProductAttributeDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productAttributeDo) Join(table schema.Tabler, on ...field.Expr) IProductAttributeDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productAttributeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProductAttributeDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productAttributeDo) RightJoin(table schema.Tabler, on ...field.Expr) IProductAttributeDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productAttributeDo) Group(cols ...field.Expr) IProductAttributeDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productAttributeDo) Having(conds ...gen.Condition) IProductAttributeDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productAttributeDo) Limit(limit int) IProductAttributeDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productAttributeDo) Offset(offset int) IProductAttributeDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productAttributeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProductAttributeDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productAttributeDo) Unscoped() IProductAttributeDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productAttributeDo) Create(values ...*model.ProductAttribute) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productAttributeDo) CreateInBatches(values []*model.ProductAttribute, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productAttributeDo) Save(values ...*model.ProductAttribute) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productAttributeDo) First() (*model.ProductAttribute, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductAttribute), nil
	}
}

func (p productAttributeDo) Take() (*model.ProductAttribute, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductAttribute), nil
	}
}

func (p productAttributeDo) Last() (*model.ProductAttribute, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductAttribute), nil
	}
}

func (p productAttributeDo) Find() ([]*model.ProductAttribute, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProductAttribute), err
}

func (p productAttributeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductAttribute, err error) {
	buf := make([]*model.ProductAttribute, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productAttributeDo) FindInBatches(result *[]*model.ProductAttribute, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productAttributeDo) Attrs(attrs ...field.AssignExpr) IProductAttributeDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productAttributeDo) Assign(attrs ...field.AssignExpr) IProductAttributeDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productAttributeDo) Joins(fields ...field.RelationField) IProductAttributeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productAttributeDo) Preload(fields ...field.RelationField) IProductAttributeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productAttributeDo) FirstOrInit() (*model.ProductAttribute, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductAttribute), nil
	}
}

func (p productAttributeDo) FirstOrCreate() (*model.ProductAttribute, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductAttribute), nil
	}
}

func (p productAttributeDo) FindByPage(offset int, limit int) (result []*model.ProductAttribute, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productAttributeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productAttributeDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productAttributeDo) Delete(models ...*model.ProductAttribute) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productAttributeDo) withDO(do gen.Dao) *productAttributeDo {
	p.DO = *do.(*gen.DO)
	return p
}
