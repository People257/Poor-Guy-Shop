// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/people257/poor-guy-shop/product-service/gen/gen/model"
)

func newProductSku(db *gorm.DB, opts ...gen.DOOption) productSku {
	_productSku := productSku{}

	_productSku.productSkuDo.UseDB(db, opts...)
	_productSku.productSkuDo.UseModel(&model.ProductSku{})

	tableName := _productSku.productSkuDo.TableName()
	_productSku.ALL = field.NewAsterisk(tableName)
	_productSku.ID = field.NewString(tableName, "id")
	_productSku.ProductID = field.NewString(tableName, "product_id")
	_productSku.SkuCode = field.NewString(tableName, "sku_code")
	_productSku.Name = field.NewString(tableName, "name")
	_productSku.MarketPrice = field.NewField(tableName, "market_price")
	_productSku.SalePrice = field.NewField(tableName, "sale_price")
	_productSku.CostPrice = field.NewField(tableName, "cost_price")
	_productSku.StockQuantity = field.NewInt32(tableName, "stock_quantity")
	_productSku.ReservedQuantity = field.NewInt32(tableName, "reserved_quantity")
	_productSku.SoldQuantity = field.NewInt32(tableName, "sold_quantity")
	_productSku.Attributes = field.NewString(tableName, "attributes")
	_productSku.Weight = field.NewField(tableName, "weight")
	_productSku.Dimensions = field.NewString(tableName, "dimensions")
	_productSku.ImageURL = field.NewString(tableName, "image_url")
	_productSku.Status = field.NewInt32(tableName, "status")
	_productSku.CreatedAt = field.NewTime(tableName, "created_at")
	_productSku.UpdatedAt = field.NewTime(tableName, "updated_at")
	_productSku.DeletedAt = field.NewField(tableName, "deleted_at")

	_productSku.fillFieldMap()

	return _productSku
}

type productSku struct {
	productSkuDo productSkuDo

	ALL              field.Asterisk
	ID               field.String // SKU ID
	ProductID        field.String // 商品ID
	SkuCode          field.String // SKU编码
	Name             field.String // SKU名称
	MarketPrice      field.Field  // 市场价格
	SalePrice        field.Field  // 销售价格
	CostPrice        field.Field  // 成本价格
	StockQuantity    field.Int32  // 库存数量
	ReservedQuantity field.Int32  // 预留数量
	SoldQuantity     field.Int32  // 已售数量
	Attributes       field.String // SKU属性 {"color": "红色", "size": "XL", "style": "修身"}
	Weight           field.Field  // SKU重量(kg)
	Dimensions       field.String // SKU尺寸
	ImageURL         field.String // SKU图片URL
	Status           field.Int32  // SKU状态: 1=正常, 2=停售, 3=缺货, 4=已删除
	CreatedAt        field.Time   // 创建时间
	UpdatedAt        field.Time   // 更新时间
	DeletedAt        field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (p productSku) Table(newTableName string) *productSku {
	p.productSkuDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p productSku) As(alias string) *productSku {
	p.productSkuDo.DO = *(p.productSkuDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *productSku) updateTableName(table string) *productSku {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.ProductID = field.NewString(table, "product_id")
	p.SkuCode = field.NewString(table, "sku_code")
	p.Name = field.NewString(table, "name")
	p.MarketPrice = field.NewField(table, "market_price")
	p.SalePrice = field.NewField(table, "sale_price")
	p.CostPrice = field.NewField(table, "cost_price")
	p.StockQuantity = field.NewInt32(table, "stock_quantity")
	p.ReservedQuantity = field.NewInt32(table, "reserved_quantity")
	p.SoldQuantity = field.NewInt32(table, "sold_quantity")
	p.Attributes = field.NewString(table, "attributes")
	p.Weight = field.NewField(table, "weight")
	p.Dimensions = field.NewString(table, "dimensions")
	p.ImageURL = field.NewString(table, "image_url")
	p.Status = field.NewInt32(table, "status")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *productSku) WithContext(ctx context.Context) IProductSkuDo {
	return p.productSkuDo.WithContext(ctx)
}

func (p productSku) TableName() string { return p.productSkuDo.TableName() }

func (p productSku) Alias() string { return p.productSkuDo.Alias() }

func (p productSku) Columns(cols ...field.Expr) gen.Columns { return p.productSkuDo.Columns(cols...) }

func (p *productSku) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *productSku) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 18)
	p.fieldMap["id"] = p.ID
	p.fieldMap["product_id"] = p.ProductID
	p.fieldMap["sku_code"] = p.SkuCode
	p.fieldMap["name"] = p.Name
	p.fieldMap["market_price"] = p.MarketPrice
	p.fieldMap["sale_price"] = p.SalePrice
	p.fieldMap["cost_price"] = p.CostPrice
	p.fieldMap["stock_quantity"] = p.StockQuantity
	p.fieldMap["reserved_quantity"] = p.ReservedQuantity
	p.fieldMap["sold_quantity"] = p.SoldQuantity
	p.fieldMap["attributes"] = p.Attributes
	p.fieldMap["weight"] = p.Weight
	p.fieldMap["dimensions"] = p.Dimensions
	p.fieldMap["image_url"] = p.ImageURL
	p.fieldMap["status"] = p.Status
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p productSku) clone(db *gorm.DB) productSku {
	p.productSkuDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p productSku) replaceDB(db *gorm.DB) productSku {
	p.productSkuDo.ReplaceDB(db)
	return p
}

type productSkuDo struct{ gen.DO }

type IProductSkuDo interface {
	gen.SubQuery
	Debug() IProductSkuDo
	WithContext(ctx context.Context) IProductSkuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProductSkuDo
	WriteDB() IProductSkuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProductSkuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProductSkuDo
	Not(conds ...gen.Condition) IProductSkuDo
	Or(conds ...gen.Condition) IProductSkuDo
	Select(conds ...field.Expr) IProductSkuDo
	Where(conds ...gen.Condition) IProductSkuDo
	Order(conds ...field.Expr) IProductSkuDo
	Distinct(cols ...field.Expr) IProductSkuDo
	Omit(cols ...field.Expr) IProductSkuDo
	Join(table schema.Tabler, on ...field.Expr) IProductSkuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProductSkuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProductSkuDo
	Group(cols ...field.Expr) IProductSkuDo
	Having(conds ...gen.Condition) IProductSkuDo
	Limit(limit int) IProductSkuDo
	Offset(offset int) IProductSkuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProductSkuDo
	Unscoped() IProductSkuDo
	Create(values ...*model.ProductSku) error
	CreateInBatches(values []*model.ProductSku, batchSize int) error
	Save(values ...*model.ProductSku) error
	First() (*model.ProductSku, error)
	Take() (*model.ProductSku, error)
	Last() (*model.ProductSku, error)
	Find() ([]*model.ProductSku, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductSku, err error)
	FindInBatches(result *[]*model.ProductSku, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProductSku) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProductSkuDo
	Assign(attrs ...field.AssignExpr) IProductSkuDo
	Joins(fields ...field.RelationField) IProductSkuDo
	Preload(fields ...field.RelationField) IProductSkuDo
	FirstOrInit() (*model.ProductSku, error)
	FirstOrCreate() (*model.ProductSku, error)
	FindByPage(offset int, limit int) (result []*model.ProductSku, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProductSkuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p productSkuDo) Debug() IProductSkuDo {
	return p.withDO(p.DO.Debug())
}

func (p productSkuDo) WithContext(ctx context.Context) IProductSkuDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productSkuDo) ReadDB() IProductSkuDo {
	return p.Clauses(dbresolver.Read)
}

func (p productSkuDo) WriteDB() IProductSkuDo {
	return p.Clauses(dbresolver.Write)
}

func (p productSkuDo) Session(config *gorm.Session) IProductSkuDo {
	return p.withDO(p.DO.Session(config))
}

func (p productSkuDo) Clauses(conds ...clause.Expression) IProductSkuDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productSkuDo) Returning(value interface{}, columns ...string) IProductSkuDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productSkuDo) Not(conds ...gen.Condition) IProductSkuDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productSkuDo) Or(conds ...gen.Condition) IProductSkuDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productSkuDo) Select(conds ...field.Expr) IProductSkuDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productSkuDo) Where(conds ...gen.Condition) IProductSkuDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productSkuDo) Order(conds ...field.Expr) IProductSkuDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productSkuDo) Distinct(cols ...field.Expr) IProductSkuDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productSkuDo) Omit(cols ...field.Expr) IProductSkuDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productSkuDo) Join(table schema.Tabler, on ...field.Expr) IProductSkuDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productSkuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProductSkuDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productSkuDo) RightJoin(table schema.Tabler, on ...field.Expr) IProductSkuDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productSkuDo) Group(cols ...field.Expr) IProductSkuDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productSkuDo) Having(conds ...gen.Condition) IProductSkuDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productSkuDo) Limit(limit int) IProductSkuDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productSkuDo) Offset(offset int) IProductSkuDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productSkuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProductSkuDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productSkuDo) Unscoped() IProductSkuDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productSkuDo) Create(values ...*model.ProductSku) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productSkuDo) CreateInBatches(values []*model.ProductSku, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productSkuDo) Save(values ...*model.ProductSku) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productSkuDo) First() (*model.ProductSku, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductSku), nil
	}
}

func (p productSkuDo) Take() (*model.ProductSku, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductSku), nil
	}
}

func (p productSkuDo) Last() (*model.ProductSku, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductSku), nil
	}
}

func (p productSkuDo) Find() ([]*model.ProductSku, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProductSku), err
}

func (p productSkuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductSku, err error) {
	buf := make([]*model.ProductSku, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productSkuDo) FindInBatches(result *[]*model.ProductSku, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productSkuDo) Attrs(attrs ...field.AssignExpr) IProductSkuDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productSkuDo) Assign(attrs ...field.AssignExpr) IProductSkuDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productSkuDo) Joins(fields ...field.RelationField) IProductSkuDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productSkuDo) Preload(fields ...field.RelationField) IProductSkuDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productSkuDo) FirstOrInit() (*model.ProductSku, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductSku), nil
	}
}

func (p productSkuDo) FirstOrCreate() (*model.ProductSku, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductSku), nil
	}
}

func (p productSkuDo) FindByPage(offset int, limit int) (result []*model.ProductSku, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productSkuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productSkuDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productSkuDo) Delete(models ...*model.ProductSku) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productSkuDo) withDO(do gen.Dao) *productSkuDo {
	p.DO = *do.(*gen.DO)
	return p
}
