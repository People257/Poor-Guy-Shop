// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/people257/poor-guy-shop/oss-infra/gen/gen/model"
)

func newFileAccessLog(db *gorm.DB, opts ...gen.DOOption) fileAccessLog {
	_fileAccessLog := fileAccessLog{}

	_fileAccessLog.fileAccessLogDo.UseDB(db, opts...)
	_fileAccessLog.fileAccessLogDo.UseModel(&model.FileAccessLog{})

	tableName := _fileAccessLog.fileAccessLogDo.TableName()
	_fileAccessLog.ALL = field.NewAsterisk(tableName)
	_fileAccessLog.ID = field.NewString(tableName, "id")
	_fileAccessLog.FileID = field.NewString(tableName, "file_id")
	_fileAccessLog.UserID = field.NewString(tableName, "user_id")
	_fileAccessLog.Action = field.NewString(tableName, "action")
	_fileAccessLog.IPAddress = field.NewString(tableName, "ip_address")
	_fileAccessLog.StatusCode = field.NewInt16(tableName, "status_code")
	_fileAccessLog.AccessedAt = field.NewTime(tableName, "accessed_at")

	_fileAccessLog.fillFieldMap()

	return _fileAccessLog
}

type fileAccessLog struct {
	fileAccessLogDo fileAccessLogDo

	ALL        field.Asterisk
	ID         field.String // 日志ID, 主键
	FileID     field.String // 文件ID
	UserID     field.String // 访问用户ID
	Action     field.String // 操作类型: upload, download, delete
	IPAddress  field.String // 访问IP地址
	StatusCode field.Int16  // HTTP状态码
	AccessedAt field.Time   // 访问时间

	fieldMap map[string]field.Expr
}

func (f fileAccessLog) Table(newTableName string) *fileAccessLog {
	f.fileAccessLogDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fileAccessLog) As(alias string) *fileAccessLog {
	f.fileAccessLogDo.DO = *(f.fileAccessLogDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fileAccessLog) updateTableName(table string) *fileAccessLog {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewString(table, "id")
	f.FileID = field.NewString(table, "file_id")
	f.UserID = field.NewString(table, "user_id")
	f.Action = field.NewString(table, "action")
	f.IPAddress = field.NewString(table, "ip_address")
	f.StatusCode = field.NewInt16(table, "status_code")
	f.AccessedAt = field.NewTime(table, "accessed_at")

	f.fillFieldMap()

	return f
}

func (f *fileAccessLog) WithContext(ctx context.Context) IFileAccessLogDo {
	return f.fileAccessLogDo.WithContext(ctx)
}

func (f fileAccessLog) TableName() string { return f.fileAccessLogDo.TableName() }

func (f fileAccessLog) Alias() string { return f.fileAccessLogDo.Alias() }

func (f fileAccessLog) Columns(cols ...field.Expr) gen.Columns {
	return f.fileAccessLogDo.Columns(cols...)
}

func (f *fileAccessLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fileAccessLog) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["id"] = f.ID
	f.fieldMap["file_id"] = f.FileID
	f.fieldMap["user_id"] = f.UserID
	f.fieldMap["action"] = f.Action
	f.fieldMap["ip_address"] = f.IPAddress
	f.fieldMap["status_code"] = f.StatusCode
	f.fieldMap["accessed_at"] = f.AccessedAt
}

func (f fileAccessLog) clone(db *gorm.DB) fileAccessLog {
	f.fileAccessLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fileAccessLog) replaceDB(db *gorm.DB) fileAccessLog {
	f.fileAccessLogDo.ReplaceDB(db)
	return f
}

type fileAccessLogDo struct{ gen.DO }

type IFileAccessLogDo interface {
	gen.SubQuery
	Debug() IFileAccessLogDo
	WithContext(ctx context.Context) IFileAccessLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFileAccessLogDo
	WriteDB() IFileAccessLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFileAccessLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFileAccessLogDo
	Not(conds ...gen.Condition) IFileAccessLogDo
	Or(conds ...gen.Condition) IFileAccessLogDo
	Select(conds ...field.Expr) IFileAccessLogDo
	Where(conds ...gen.Condition) IFileAccessLogDo
	Order(conds ...field.Expr) IFileAccessLogDo
	Distinct(cols ...field.Expr) IFileAccessLogDo
	Omit(cols ...field.Expr) IFileAccessLogDo
	Join(table schema.Tabler, on ...field.Expr) IFileAccessLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFileAccessLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFileAccessLogDo
	Group(cols ...field.Expr) IFileAccessLogDo
	Having(conds ...gen.Condition) IFileAccessLogDo
	Limit(limit int) IFileAccessLogDo
	Offset(offset int) IFileAccessLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFileAccessLogDo
	Unscoped() IFileAccessLogDo
	Create(values ...*model.FileAccessLog) error
	CreateInBatches(values []*model.FileAccessLog, batchSize int) error
	Save(values ...*model.FileAccessLog) error
	First() (*model.FileAccessLog, error)
	Take() (*model.FileAccessLog, error)
	Last() (*model.FileAccessLog, error)
	Find() ([]*model.FileAccessLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileAccessLog, err error)
	FindInBatches(result *[]*model.FileAccessLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FileAccessLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFileAccessLogDo
	Assign(attrs ...field.AssignExpr) IFileAccessLogDo
	Joins(fields ...field.RelationField) IFileAccessLogDo
	Preload(fields ...field.RelationField) IFileAccessLogDo
	FirstOrInit() (*model.FileAccessLog, error)
	FirstOrCreate() (*model.FileAccessLog, error)
	FindByPage(offset int, limit int) (result []*model.FileAccessLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFileAccessLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fileAccessLogDo) Debug() IFileAccessLogDo {
	return f.withDO(f.DO.Debug())
}

func (f fileAccessLogDo) WithContext(ctx context.Context) IFileAccessLogDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fileAccessLogDo) ReadDB() IFileAccessLogDo {
	return f.Clauses(dbresolver.Read)
}

func (f fileAccessLogDo) WriteDB() IFileAccessLogDo {
	return f.Clauses(dbresolver.Write)
}

func (f fileAccessLogDo) Session(config *gorm.Session) IFileAccessLogDo {
	return f.withDO(f.DO.Session(config))
}

func (f fileAccessLogDo) Clauses(conds ...clause.Expression) IFileAccessLogDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fileAccessLogDo) Returning(value interface{}, columns ...string) IFileAccessLogDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fileAccessLogDo) Not(conds ...gen.Condition) IFileAccessLogDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fileAccessLogDo) Or(conds ...gen.Condition) IFileAccessLogDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fileAccessLogDo) Select(conds ...field.Expr) IFileAccessLogDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fileAccessLogDo) Where(conds ...gen.Condition) IFileAccessLogDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fileAccessLogDo) Order(conds ...field.Expr) IFileAccessLogDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fileAccessLogDo) Distinct(cols ...field.Expr) IFileAccessLogDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fileAccessLogDo) Omit(cols ...field.Expr) IFileAccessLogDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fileAccessLogDo) Join(table schema.Tabler, on ...field.Expr) IFileAccessLogDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fileAccessLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFileAccessLogDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fileAccessLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IFileAccessLogDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fileAccessLogDo) Group(cols ...field.Expr) IFileAccessLogDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fileAccessLogDo) Having(conds ...gen.Condition) IFileAccessLogDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fileAccessLogDo) Limit(limit int) IFileAccessLogDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fileAccessLogDo) Offset(offset int) IFileAccessLogDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fileAccessLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFileAccessLogDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fileAccessLogDo) Unscoped() IFileAccessLogDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fileAccessLogDo) Create(values ...*model.FileAccessLog) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fileAccessLogDo) CreateInBatches(values []*model.FileAccessLog, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fileAccessLogDo) Save(values ...*model.FileAccessLog) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fileAccessLogDo) First() (*model.FileAccessLog, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileAccessLog), nil
	}
}

func (f fileAccessLogDo) Take() (*model.FileAccessLog, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileAccessLog), nil
	}
}

func (f fileAccessLogDo) Last() (*model.FileAccessLog, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileAccessLog), nil
	}
}

func (f fileAccessLogDo) Find() ([]*model.FileAccessLog, error) {
	result, err := f.DO.Find()
	return result.([]*model.FileAccessLog), err
}

func (f fileAccessLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileAccessLog, err error) {
	buf := make([]*model.FileAccessLog, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fileAccessLogDo) FindInBatches(result *[]*model.FileAccessLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fileAccessLogDo) Attrs(attrs ...field.AssignExpr) IFileAccessLogDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fileAccessLogDo) Assign(attrs ...field.AssignExpr) IFileAccessLogDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fileAccessLogDo) Joins(fields ...field.RelationField) IFileAccessLogDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fileAccessLogDo) Preload(fields ...field.RelationField) IFileAccessLogDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fileAccessLogDo) FirstOrInit() (*model.FileAccessLog, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileAccessLog), nil
	}
}

func (f fileAccessLogDo) FirstOrCreate() (*model.FileAccessLog, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileAccessLog), nil
	}
}

func (f fileAccessLogDo) FindByPage(offset int, limit int) (result []*model.FileAccessLog, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fileAccessLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fileAccessLogDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fileAccessLogDo) Delete(models ...*model.FileAccessLog) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fileAccessLogDo) withDO(do gen.Dao) *fileAccessLogDo {
	f.DO = *do.(*gen.DO)
	return f
}
