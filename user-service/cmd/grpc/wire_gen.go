// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/people257/poor-guy-shop/common/db"
	"github.com/people257/poor-guy-shop/common/server"
	auth4 "github.com/people257/poor-guy-shop/user-service/api/auth"
	info2 "github.com/people257/poor-guy-shop/user-service/api/info"
	"github.com/people257/poor-guy-shop/user-service/cmd/grpc/internal"
	"github.com/people257/poor-guy-shop/user-service/cmd/grpc/internal/config"
	auth3 "github.com/people257/poor-guy-shop/user-service/internal/application/auth"
	"github.com/people257/poor-guy-shop/user-service/internal/application/info"
	auth2 "github.com/people257/poor-guy-shop/user-service/internal/domain/auth"
	"github.com/people257/poor-guy-shop/user-service/internal/domain/user"
	"github.com/people257/poor-guy-shop/user-service/internal/infra"
	"github.com/people257/poor-guy-shop/user-service/internal/infra/auth"
	"github.com/people257/poor-guy-shop/user-service/internal/infra/captcha"
	"github.com/people257/poor-guy-shop/user-service/internal/infra/email"
	"github.com/people257/poor-guy-shop/user-service/internal/infra/repository"
)

// Injectors from wire.go:

func InitializeApplication(ctx context.Context, configPath2 string) (*Application, func()) {
	configConfig := config.MustLoad(configPath2)
	grpcServerConfig := config.GetGrpcServerConfig(configConfig)
	serverServer, cleanup := server.InitializeServer(ctx, grpcServerConfig)
	databaseConfig := config.GetDBConfig(configConfig)
	dbDB := internal.NewDB(databaseConfig)
	gormDB := internal.ProvideGORMDB(dbDB)
	query := internal.ProvideQuery(dbDB)
	converter := user.NewConverter()
	userRepository := repository.NewUserRepository(gormDB, query, converter)
	domainService := user.NewDomainService(userRepository)
	jwtConfig := ProvideInternalJWTConfig(configConfig)
	authConfig := infra.ProvideAuthInfraConfig(jwtConfig)
	authAuth := auth.NewAuth(authConfig)
	redisConfig := config.GetRedisConfig(configConfig)
	universalClient := db.NewRedis(redisConfig)
	client := internal.ProvideRedisClient(universalClient)
	refreshTokenRepository := repository.NewRefreshTokenRepository(client)
	service := auth.NewTokenService(authAuth, refreshTokenRepository)
	emailConfig := ProvideInternalEmailConfig(configConfig)
	emailService := email.NewSMTPService(emailConfig)
	captchaConfig := ProvideInternalCaptchaConfig(configConfig)
	captchaService := captcha.NewEmailCaptchaService(emailService, client, captchaConfig)
	authDomainService := auth2.NewDomainService(service, captchaService, refreshTokenRepository)
	authService := auth3.NewService(domainService, authDomainService, userRepository)
	authServer := auth4.NewAuthServer(authService, authAuth)
	infoService := info.NewService(userRepository)
	infoServer := info2.NewInfoServer(infoService, authAuth)
	application := NewApplication(configConfig, serverServer, authServer, infoServer)
	return application, func() {
		cleanup()
	}
}
