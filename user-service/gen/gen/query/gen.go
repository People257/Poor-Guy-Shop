// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                = new(Query)
	Permission       *permission
	Role             *role
	RolePermission   *rolePermission
	User             *user
	UserAddress      *userAddress
	UserLoginLog     *userLoginLog
	UserOauthBinding *userOauthBinding
	UserRole         *userRole
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Permission = &Q.Permission
	Role = &Q.Role
	RolePermission = &Q.RolePermission
	User = &Q.User
	UserAddress = &Q.UserAddress
	UserLoginLog = &Q.UserLoginLog
	UserOauthBinding = &Q.UserOauthBinding
	UserRole = &Q.UserRole
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		Permission:       newPermission(db, opts...),
		Role:             newRole(db, opts...),
		RolePermission:   newRolePermission(db, opts...),
		User:             newUser(db, opts...),
		UserAddress:      newUserAddress(db, opts...),
		UserLoginLog:     newUserLoginLog(db, opts...),
		UserOauthBinding: newUserOauthBinding(db, opts...),
		UserRole:         newUserRole(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Permission       permission
	Role             role
	RolePermission   rolePermission
	User             user
	UserAddress      userAddress
	UserLoginLog     userLoginLog
	UserOauthBinding userOauthBinding
	UserRole         userRole
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Permission:       q.Permission.clone(db),
		Role:             q.Role.clone(db),
		RolePermission:   q.RolePermission.clone(db),
		User:             q.User.clone(db),
		UserAddress:      q.UserAddress.clone(db),
		UserLoginLog:     q.UserLoginLog.clone(db),
		UserOauthBinding: q.UserOauthBinding.clone(db),
		UserRole:         q.UserRole.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Permission:       q.Permission.replaceDB(db),
		Role:             q.Role.replaceDB(db),
		RolePermission:   q.RolePermission.replaceDB(db),
		User:             q.User.replaceDB(db),
		UserAddress:      q.UserAddress.replaceDB(db),
		UserLoginLog:     q.UserLoginLog.replaceDB(db),
		UserOauthBinding: q.UserOauthBinding.replaceDB(db),
		UserRole:         q.UserRole.replaceDB(db),
	}
}

type queryCtx struct {
	Permission       IPermissionDo
	Role             IRoleDo
	RolePermission   IRolePermissionDo
	User             IUserDo
	UserAddress      IUserAddressDo
	UserLoginLog     IUserLoginLogDo
	UserOauthBinding IUserOauthBindingDo
	UserRole         IUserRoleDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Permission:       q.Permission.WithContext(ctx),
		Role:             q.Role.WithContext(ctx),
		RolePermission:   q.RolePermission.WithContext(ctx),
		User:             q.User.WithContext(ctx),
		UserAddress:      q.UserAddress.WithContext(ctx),
		UserLoginLog:     q.UserLoginLog.WithContext(ctx),
		UserOauthBinding: q.UserOauthBinding.WithContext(ctx),
		UserRole:         q.UserRole.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
