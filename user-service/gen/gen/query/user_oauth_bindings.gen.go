// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"github.com/people257/poor-guy-shop/user-service/gen/gen/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserOauthBinding(db *gorm.DB, opts ...gen.DOOption) userOauthBinding {
	_userOauthBinding := userOauthBinding{}

	_userOauthBinding.userOauthBindingDo.UseDB(db, opts...)
	_userOauthBinding.userOauthBindingDo.UseModel(&model.UserOauthBinding{})

	tableName := _userOauthBinding.userOauthBindingDo.TableName()
	_userOauthBinding.ALL = field.NewAsterisk(tableName)
	_userOauthBinding.ID = field.NewString(tableName, "id")
	_userOauthBinding.UserID = field.NewString(tableName, "user_id")
	_userOauthBinding.Provider = field.NewString(tableName, "provider")
	_userOauthBinding.Openid = field.NewString(tableName, "openid")
	_userOauthBinding.Unionid = field.NewString(tableName, "unionid")
	_userOauthBinding.Nickname = field.NewString(tableName, "nickname")
	_userOauthBinding.AvatarURL = field.NewString(tableName, "avatar_url")
	_userOauthBinding.CreatedAt = field.NewTime(tableName, "created_at")
	_userOauthBinding.UpdatedAt = field.NewTime(tableName, "updated_at")

	_userOauthBinding.fillFieldMap()

	return _userOauthBinding
}

type userOauthBinding struct {
	userOauthBindingDo userOauthBindingDo

	ALL       field.Asterisk
	ID        field.String // 绑定关系ID, 主键
	UserID    field.String // 外键, 关联到用户表ID
	Provider  field.String // 第三方登录提供商 (例如: 'qq', 'github', 'wechat')
	Openid    field.String // 第三方平台的用户唯一标识 (对provider唯一)
	Unionid   field.String // 微信开放平台 UnionID (如果使用微信登录)
	Nickname  field.String // 从第三方平台获取的用户昵称 (缓存)
	AvatarURL field.String // 从第三方平台获取的用户头像URL (缓存)
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 最后更新时间

	fieldMap map[string]field.Expr
}

func (u userOauthBinding) Table(newTableName string) *userOauthBinding {
	u.userOauthBindingDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userOauthBinding) As(alias string) *userOauthBinding {
	u.userOauthBindingDo.DO = *(u.userOauthBindingDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userOauthBinding) updateTableName(table string) *userOauthBinding {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewString(table, "id")
	u.UserID = field.NewString(table, "user_id")
	u.Provider = field.NewString(table, "provider")
	u.Openid = field.NewString(table, "openid")
	u.Unionid = field.NewString(table, "unionid")
	u.Nickname = field.NewString(table, "nickname")
	u.AvatarURL = field.NewString(table, "avatar_url")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userOauthBinding) WithContext(ctx context.Context) IUserOauthBindingDo {
	return u.userOauthBindingDo.WithContext(ctx)
}

func (u userOauthBinding) TableName() string { return u.userOauthBindingDo.TableName() }

func (u userOauthBinding) Alias() string { return u.userOauthBindingDo.Alias() }

func (u userOauthBinding) Columns(cols ...field.Expr) gen.Columns {
	return u.userOauthBindingDo.Columns(cols...)
}

func (u *userOauthBinding) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userOauthBinding) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["provider"] = u.Provider
	u.fieldMap["openid"] = u.Openid
	u.fieldMap["unionid"] = u.Unionid
	u.fieldMap["nickname"] = u.Nickname
	u.fieldMap["avatar_url"] = u.AvatarURL
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userOauthBinding) clone(db *gorm.DB) userOauthBinding {
	u.userOauthBindingDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userOauthBinding) replaceDB(db *gorm.DB) userOauthBinding {
	u.userOauthBindingDo.ReplaceDB(db)
	return u
}

type userOauthBindingDo struct{ gen.DO }

type IUserOauthBindingDo interface {
	gen.SubQuery
	Debug() IUserOauthBindingDo
	WithContext(ctx context.Context) IUserOauthBindingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserOauthBindingDo
	WriteDB() IUserOauthBindingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserOauthBindingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserOauthBindingDo
	Not(conds ...gen.Condition) IUserOauthBindingDo
	Or(conds ...gen.Condition) IUserOauthBindingDo
	Select(conds ...field.Expr) IUserOauthBindingDo
	Where(conds ...gen.Condition) IUserOauthBindingDo
	Order(conds ...field.Expr) IUserOauthBindingDo
	Distinct(cols ...field.Expr) IUserOauthBindingDo
	Omit(cols ...field.Expr) IUserOauthBindingDo
	Join(table schema.Tabler, on ...field.Expr) IUserOauthBindingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserOauthBindingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserOauthBindingDo
	Group(cols ...field.Expr) IUserOauthBindingDo
	Having(conds ...gen.Condition) IUserOauthBindingDo
	Limit(limit int) IUserOauthBindingDo
	Offset(offset int) IUserOauthBindingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserOauthBindingDo
	Unscoped() IUserOauthBindingDo
	Create(values ...*model.UserOauthBinding) error
	CreateInBatches(values []*model.UserOauthBinding, batchSize int) error
	Save(values ...*model.UserOauthBinding) error
	First() (*model.UserOauthBinding, error)
	Take() (*model.UserOauthBinding, error)
	Last() (*model.UserOauthBinding, error)
	Find() ([]*model.UserOauthBinding, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserOauthBinding, err error)
	FindInBatches(result *[]*model.UserOauthBinding, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserOauthBinding) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserOauthBindingDo
	Assign(attrs ...field.AssignExpr) IUserOauthBindingDo
	Joins(fields ...field.RelationField) IUserOauthBindingDo
	Preload(fields ...field.RelationField) IUserOauthBindingDo
	FirstOrInit() (*model.UserOauthBinding, error)
	FirstOrCreate() (*model.UserOauthBinding, error)
	FindByPage(offset int, limit int) (result []*model.UserOauthBinding, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserOauthBindingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userOauthBindingDo) Debug() IUserOauthBindingDo {
	return u.withDO(u.DO.Debug())
}

func (u userOauthBindingDo) WithContext(ctx context.Context) IUserOauthBindingDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userOauthBindingDo) ReadDB() IUserOauthBindingDo {
	return u.Clauses(dbresolver.Read)
}

func (u userOauthBindingDo) WriteDB() IUserOauthBindingDo {
	return u.Clauses(dbresolver.Write)
}

func (u userOauthBindingDo) Session(config *gorm.Session) IUserOauthBindingDo {
	return u.withDO(u.DO.Session(config))
}

func (u userOauthBindingDo) Clauses(conds ...clause.Expression) IUserOauthBindingDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userOauthBindingDo) Returning(value interface{}, columns ...string) IUserOauthBindingDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userOauthBindingDo) Not(conds ...gen.Condition) IUserOauthBindingDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userOauthBindingDo) Or(conds ...gen.Condition) IUserOauthBindingDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userOauthBindingDo) Select(conds ...field.Expr) IUserOauthBindingDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userOauthBindingDo) Where(conds ...gen.Condition) IUserOauthBindingDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userOauthBindingDo) Order(conds ...field.Expr) IUserOauthBindingDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userOauthBindingDo) Distinct(cols ...field.Expr) IUserOauthBindingDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userOauthBindingDo) Omit(cols ...field.Expr) IUserOauthBindingDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userOauthBindingDo) Join(table schema.Tabler, on ...field.Expr) IUserOauthBindingDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userOauthBindingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserOauthBindingDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userOauthBindingDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserOauthBindingDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userOauthBindingDo) Group(cols ...field.Expr) IUserOauthBindingDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userOauthBindingDo) Having(conds ...gen.Condition) IUserOauthBindingDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userOauthBindingDo) Limit(limit int) IUserOauthBindingDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userOauthBindingDo) Offset(offset int) IUserOauthBindingDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userOauthBindingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserOauthBindingDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userOauthBindingDo) Unscoped() IUserOauthBindingDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userOauthBindingDo) Create(values ...*model.UserOauthBinding) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userOauthBindingDo) CreateInBatches(values []*model.UserOauthBinding, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userOauthBindingDo) Save(values ...*model.UserOauthBinding) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userOauthBindingDo) First() (*model.UserOauthBinding, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOauthBinding), nil
	}
}

func (u userOauthBindingDo) Take() (*model.UserOauthBinding, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOauthBinding), nil
	}
}

func (u userOauthBindingDo) Last() (*model.UserOauthBinding, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOauthBinding), nil
	}
}

func (u userOauthBindingDo) Find() ([]*model.UserOauthBinding, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserOauthBinding), err
}

func (u userOauthBindingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserOauthBinding, err error) {
	buf := make([]*model.UserOauthBinding, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userOauthBindingDo) FindInBatches(result *[]*model.UserOauthBinding, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userOauthBindingDo) Attrs(attrs ...field.AssignExpr) IUserOauthBindingDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userOauthBindingDo) Assign(attrs ...field.AssignExpr) IUserOauthBindingDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userOauthBindingDo) Joins(fields ...field.RelationField) IUserOauthBindingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userOauthBindingDo) Preload(fields ...field.RelationField) IUserOauthBindingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userOauthBindingDo) FirstOrInit() (*model.UserOauthBinding, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOauthBinding), nil
	}
}

func (u userOauthBindingDo) FirstOrCreate() (*model.UserOauthBinding, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOauthBinding), nil
	}
}

func (u userOauthBindingDo) FindByPage(offset int, limit int) (result []*model.UserOauthBinding, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userOauthBindingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userOauthBindingDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userOauthBindingDo) Delete(models ...*model.UserOauthBinding) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userOauthBindingDo) withDO(do gen.Dao) *userOauthBindingDo {
	u.DO = *do.(*gen.DO)
	return u
}
